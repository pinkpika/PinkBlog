<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pink Blog</title>
  <icon>https://www.gravatar.com/avatar/5c6581fa74d8841029b0c88328e88401</icon>
  <subtitle>Simplicity is the soul of efficiency.</subtitle>
  <link href="http://pinkpika.github.io/pinkblog/atom.xml" rel="self"/>
  
  <link href="http://pinkpika.github.io/pinkblog/"/>
  <updated>2022-01-23T18:57:03.420Z</updated>
  <id>http://pinkpika.github.io/pinkblog/</id>
  
  <author>
    <name>pinkpika</name>
    <email>tim801217@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo-RSS+Sitemap設定</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/01/23/Hexo-RSS-Sitemap%E8%A8%AD%E5%AE%9A/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/01/23/Hexo-RSS-Sitemap%E8%A8%AD%E5%AE%9A/</id>
    <published>2022-01-23T05:33:15.000Z</published>
    <updated>2022-01-23T18:57:03.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h1><h2 id="RSS-簡介"><a href="#RSS-簡介" class="headerlink" title="RSS 簡介"></a>RSS 簡介</h2><p>RSS 全名叫做 RDF Site Summary 或是 Really Simple Syndication，用於訂閱網站訊息的一種方式，<br>網站產生 RSS 檔案後，其他人可以利用訂閱該 RSS 的方式來觀察是否有更新內容，無需再連結或開啟網站，<br>而後也衍生出很多 RSS 閱讀器，可以在上面訂閱你關注的網站，快速閱讀多個網站內容，<br>所以為你的 Blog 製作 RSS 也是讓你的網站更容易被別人追蹤。</p><h2 id="RSS-設定方式"><a href="#RSS-設定方式" class="headerlink" title="RSS 設定方式"></a>RSS 設定方式</h2><ol><li><p>先在終端機輸入下面指令，安裝 feed 生產器</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure></li><li><p>編輯根目錄的 <code>_config.yml</code>，設定的相關參數請參考官網 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">7</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>重新產生檔案，就可以在 public 資料夾裡看到 <code>atom.xml</code> 檔案</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure></li></ol><img src="/pinkblog/2022/01/23/Hexo-RSS-Sitemap%E8%A8%AD%E5%AE%9A/1.png" class="" width="300"><hr><h1 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h1><h2 id="Sitemap-簡介"><a href="#Sitemap-簡介" class="headerlink" title="Sitemap 簡介"></a>Sitemap 簡介</h2><p>通常網站建立完成，經過時間和在 Google 搜尋的訓練下，會自動收錄網站地圖，<br>但是另一種方式就是主動提供 Sitemap，可以在網站建立後，可以提供 Sitemap 可以列出網頁清單，加速收錄網站的速度。</p><h2 id="Sitemap-設定方式"><a href="#Sitemap-設定方式" class="headerlink" title="Sitemap 設定方式"></a>Sitemap 設定方式</h2><ol><li><p>先在終端機輸入下面指令，安裝 feed 生產器</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure></li><li><p>編輯根目錄的 <code>_config.yml</code>，設定的相關參數請參考官網 <a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">  <span class="attr">template:</span> </span><br><span class="line">  <span class="attr">rel:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>重新產生檔案，就可以在 public 資料夾裡看到 <code>sitemap.xml</code> 檔案</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure></li></ol><img src="/pinkblog/2022/01/23/Hexo-RSS-Sitemap%E8%A8%AD%E5%AE%9A/2.png" class="" width="300"><ol start="4"><li>可以去 Google Search 加入網站後，並且加上 sitemap 網址</li></ol><img src="/pinkblog/2022/01/23/Hexo-RSS-Sitemap%E8%A8%AD%E5%AE%9A/3.png" class="" width="800">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RSS&quot;&gt;&lt;a href=&quot;#RSS&quot; class=&quot;headerlink&quot; title=&quot;RSS&quot;&gt;&lt;/a&gt;RSS&lt;/h1&gt;&lt;h2 id=&quot;RSS-簡介&quot;&gt;&lt;a href=&quot;#RSS-簡介&quot; class=&quot;headerlink&quot; title=&quot;RSS 簡介&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Web Development" scheme="http://pinkpika.github.io/pinkblog/categories/Web-Development/"/>
    
    <category term="Hexo" scheme="http://pinkpika.github.io/pinkblog/categories/Web-Development/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Podspec 內使用三方、Asset、Storyboard、Xib</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/</id>
    <published>2022-01-16T02:39:14.000Z</published>
    <updated>2022-01-23T19:00:00.972Z</updated>
    
    <content type="html"><![CDATA[<p>模組跟專案程式碼沒有什麼差別，一樣會需要依賴某個三方、使用某個三方，<br>也可能需要使用到一些 Asset 資源圖片等等和 Storyboard、Xib，理論上都是可以做得到的。</p><p>針對原本 Podspec 的資料夾結構，有進行調整，所以可以先看 <a href="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/" title="Podspec 調整資料夾結構">Podspec 調整資料夾結構</a><br>如果不調整也是沒問題，只要小心 podspec 內定義的路徑。</p><h1 id="Podspec-內使用三方"><a href="#Podspec-內使用三方" class="headerlink" title="Podspec 內使用三方"></a>Podspec 內使用三方</h1><ol><li>編輯 TestPodFramework.podspec，新增依賴三方，例如 Alamofire</li></ol><ul><li>盡量固定版號或是使用 ~&gt;，讓依賴的三方可以在固定版號之上，減少使用到錯誤版號的問題</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.dependency <span class="string">&#x27;Alamofire&#x27;</span>, <span class="string">&#x27;~&gt; 5.4.4&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>編輯 podfile，與第一步使用相同版號，重新 pod install</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">target <span class="string">&#x27;DemoTestPodFramework&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  use_frameworks!</span><br><span class="line">  pod <span class="string">&#x27;TestPodFramework&#x27;</span>, <span class="symbol">:path</span> =&gt; <span class="string">&#x27;../&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">target <span class="string">&#x27;TestPodFramework&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  use_frameworks!</span><br><span class="line">  pod <span class="string">&#x27;Alamofire&#x27;</span>, <span class="string">&#x27;~&gt; 5.4.4&#x27;</span></span><br><span class="line">  </span><br><span class="line">  target <span class="string">&#x27;TestPodFrameworkTests&#x27;</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="3"><li>這樣就可以在模組內使用任意三方啦！</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/1.jpg" class="" width="700"><hr><h1 id="Podspec-內使用-Asset-或是給外部使用"><a href="#Podspec-內使用-Asset-或是給外部使用" class="headerlink" title="Podspec 內使用 Asset 或是給外部使用"></a>Podspec 內使用 Asset 或是給外部使用</h1><ol><li>編輯 TestPodFramework.podspec，新增 s.resource_bundles</li></ol><ul><li>前面是指此 resource_bundle 的名稱，例如叫做 TestPodFramework</li><li>後面是指此 resource_bundle 所打包資源的位置</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.resource_bundles = &#123;</span><br><span class="line">    <span class="string">&#x27;TestPodFramework&#x27;</span> =&gt; [<span class="string">&#x27;TestPodFramework/Assets/*.*&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;TestPodFramework/Classes/**/*.&#123;xib,storyboard&#125;&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡提醒一下，一般還有使用 s.resource、s.resources，但非常不建議這樣做，<br>因為這那種做法打包出來的 bundle 會跟專案的 main bundle 混在一起，<br>如果專案本身有相同名稱的圖片或是 storyboard，會優先使用專案的，會造成模組內的資源全失效ＱＱ</p><ol start="2"><li>打開 TestPodFramework.xcworkspace，對 Assets 新增 Assets Catalog</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/2.jpg" class="" width="800"><ol start="3"><li>模組內在 Assets Catalog 內直接加入一張圖</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/3.jpg" class="" width="400"><ol start="4"><li>模組內新增 Bundle 的 extension，讓此模組的 Bundle 在模組內或模組外都更容易找到</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bundle</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// TestPodFramework 的 Bundle 資源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> testPodFramework: <span class="type">Bundle</span>?&#123;</span><br><span class="line">        <span class="keyword">let</span> kBundle <span class="operator">=</span> <span class="string">&quot;bundle&quot;</span></span><br><span class="line">        <span class="keyword">let</span> kFramework <span class="operator">=</span> <span class="string">&quot;TestPodFramework&quot;</span></span><br><span class="line">        <span class="keyword">let</span> bundleURL <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: kFramework, withExtension: kBundle)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> bundleURL <span class="operator">=</span> bundleURL <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Bundle</span>(url: bundleURL)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>專案或模組只要載入圖片時指定 Bundle 即可</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imageView.image <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;refresh&quot;</span>, in: <span class="type">Bundle</span>.testPodFramework, compatibleWith: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="Podspec-內使用-Storyboard-給外部使用"><a href="#Podspec-內使用-Storyboard-給外部使用" class="headerlink" title="Podspec 內使用 Storyboard 給外部使用"></a>Podspec 內使用 Storyboard 給外部使用</h1><ol><li>請先做上面提到的 Podspec 內使用 Asset 的”第一步”</li></ol><p>這裡會先遇到一個難處<br>要會將 ViewController 和 Storyboard 的進行連接<br>這樣初始化 VC 才會帶有完整的 Storyboard。</p><ol start="2"><li>模組內新增 protocol，來處理 ViewController 和 Storyboard</li></ol><p>有下面三個屬性來處理，都有預設的處理方式，如果有需要自行實作也可</p><ul><li>storyboardName</li><li>storyboardBundle</li><li>storyboardIdentifier</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 紀錄Storyboard的資訊</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">StoryboardInstantiable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Storyboard的名稱</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storyboardName: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Storyboard的Bundle</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storyboardBundle: <span class="type">Bundle</span>? &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Storyboard的Identifier(唯一辨識名稱)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storyboardIdentifier: <span class="type">String</span>? &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 可直接產生Storyboard bind Class之後的結果</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">StoryboardInstantiable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Storyboard的名稱</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storyboardName: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="type">String</span>(describing: <span class="keyword">self</span>) &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Storyboard的Bundle</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storyboardBundle: <span class="type">Bundle</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> selfClass <span class="operator">=</span> <span class="keyword">self</span> <span class="keyword">as?</span> <span class="type">AnyClass</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> bundle <span class="operator">=</span> <span class="type">Bundle</span>(for: selfClass)</span><br><span class="line">            <span class="keyword">return</span> bundle</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/// Storyboard的Identifier(唯一辨識名稱)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storyboardIdentifier: <span class="type">String</span>? &#123; <span class="keyword">return</span> <span class="type">String</span>(describing: <span class="keyword">self</span>) &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 實體化(將ViewController和Storyboard綁在一起)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">instantiate</span>()</span> -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> storyboard <span class="operator">=</span> <span class="type">UIStoryboard</span>(name: storyboardName, bundle: storyboardBundle)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> storyboardIdentifier <span class="operator">=</span> storyboardIdentifier &#123;</span><br><span class="line">            <span class="keyword">return</span> storyboard.instantiateViewController(withIdentifier: storyboardIdentifier) <span class="keyword">as!</span> <span class="keyword">Self</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> storyboard.instantiateInitialViewController() <span class="keyword">as!</span> <span class="keyword">Self</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>CakeViewController 需要 confirm StoryboardInstantiable</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/4.jpg" class="" width="800"><ol start="4"><li>Storyboard 設定 class 和 StoryboardID</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/5.jpg" class="" width="800"><ol start="5"><li>專案或模組只要使用 instantiate 方法就可以正常載入 Storyboard!</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/6.jpg" class="" width="800"><hr><h1 id="Podspec-內使用-Nib-給外部使用-與-Storyboard-方式類似"><a href="#Podspec-內使用-Nib-給外部使用-與-Storyboard-方式類似" class="headerlink" title="Podspec 內使用 Nib 給外部使用 ( 與 Storyboard 方式類似 )"></a>Podspec 內使用 Nib 給外部使用 ( 與 Storyboard 方式類似 )</h1><img src="/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/7.jpg" class="" width="300"><img src="/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/8.jpg" class="" width="800"><img src="/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/9.jpg" class="" width="800"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 紀錄Nib的資訊</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">NibInstantiable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// nib的名稱</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> nibName: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// nib的Bundle</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> nibBundle: <span class="type">Bundle</span>? &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 可直接產生Nib bind Class之後的結果</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">NibInstantiable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// nib的名稱</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> nibName: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="type">String</span>(describing: <span class="keyword">self</span>) &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// nib的Bundle</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> nibBundle: <span class="type">Bundle</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> selfClass <span class="operator">=</span> <span class="keyword">self</span> <span class="keyword">as?</span> <span class="type">AnyClass</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> bundle <span class="operator">=</span> <span class="type">Bundle</span>(for: selfClass)</span><br><span class="line">            <span class="keyword">return</span> bundle</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 實體化(將View和Nib綁在一起)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">instantiateFirstView</span>(<span class="params">owner</span>: <span class="keyword">Any</span><span class="operator">?</span> <span class="operator">=</span> <span class="literal">nil</span>)</span> -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> nib <span class="operator">=</span> <span class="type">UINib</span>(nibName: nibName, bundle: nibBundle)</span><br><span class="line">        <span class="keyword">return</span> nib.instantiate(withOwner: owner).first <span class="keyword">as!</span> <span class="keyword">Self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="note info flat"><p>上面紀錄之前研究的結果，但模組的 UI 較建議還是使用”純程式碼”的方式撰寫，減少連結、打包或轉移的問題。</p></div><hr><h1 id="Demo-連結"><a href="#Demo-連結" class="headerlink" title="Demo 連結"></a>Demo 連結</h1><p><a href="https://github.com/pinkpika/TestPodFramework">TestPodFramework</a><br><a href="https://github.com/pinkpika/TestPodFramework/blob/main/TestPodFramework.podspec">TestPodFramework - podspec</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;模組跟專案程式碼沒有什麼差別，一樣會需要依賴某個三方、使用某個三方，&lt;br&gt;也可能需要使用到一些 Asset 資源圖片等等和 Storyboard、Xib，理論上都是可以做得到的。&lt;/p&gt;
&lt;p&gt;針對原本 Podspec 的資料夾結構，有進行調整，所以可以先看 &lt;a hre</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    <category term="Modular 模組化" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/Modular-%E6%A8%A1%E7%B5%84%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Podspec 調整資料夾結構</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/</id>
    <published>2022-01-16T02:38:53.000Z</published>
    <updated>2022-01-23T17:48:51.854Z</updated>
    
    <content type="html"><![CDATA[<p>由於官方的 pod lib create 產生的專案結構，模組的編譯會依賴於某個 Demo，<br>不適合單獨編譯 Framework 和做單元測試，匯入程式碼和圖片資源也要特別小心路徑，<br>也不便於建立多層子模組 Submodule 和進行管理，<br>所以我們來試著改造看看吧！</p><ul><li>原本的資料夾結構</li></ul><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/1.jpg" class="" width="400"><ul><li>最後調整後的資料夾結構</li></ul><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/9.jpg" class="" width="600"><h1 id="修改完的好處"><a href="#修改完的好處" class="headerlink" title="修改完的好處"></a>修改完的好處</h1><ul><li>可以單獨的 Scheme 可以單獨編譯 Framework，適合來跑 CICD</li><li>可以有預設的 DocC 來自動產生 Framework 文件</li><li>可以單獨跑 Framework UnitTest</li><li>可以方便管理多層子模組 Submodule</li></ul><hr><h1 id="調整資料夾步驟"><a href="#調整資料夾步驟" class="headerlink" title="調整資料夾步驟"></a>調整資料夾步驟</h1><ol><li>先將原本的 Podspec 模組資料夾換個名字，例如 TestPodFramework =&gt; TestPodFrameworkOrigin，避免等等衝突名稱</li><li>使用 Xcode 建立新的 Framework Project，命名跟原本的 Podspec 一樣就好，並且將它放在同名的資料夾裡</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/2.jpg" class="" width="600"><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/3.jpg" class="" width="600"><ol start="3"><li>將跟程式碼沒關係的部分 (LICENSE、README.md、TestPodFramework.podspec) 複製到新的 “TestPodFramework 根目錄”</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/4.jpg" class="" width="600"><ol start="4"><li>將跟程式碼和資源檔的部分 (Classes、Assets) 複製到新的 “TestPodFramework 專案裡”</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/5.jpg" class="" width="600"><ol start="5"><li>打開 TestPodFramework.xcodeproj，使用 add file 的方式把 Classes 和 Assets，確認一下可否編譯</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/6.jpg" class="" width="300"><ol start="6"><li>最後一步，因為 source_files 路徑改變，請打開 TestPodFramework.podspec，修改 s.source_files<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.source_files = <span class="string">&#x27;TestPodFramework/TestPodFramework/Classes/**/*&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="新增Demo"><a href="#新增Demo" class="headerlink" title="新增Demo"></a>新增Demo</h1><ol><li>打開 TestPodFramework.xcodeproj，按下下方，新增一個 App</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/7.jpg" class="" width="300"><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/8.jpg" class="" width="600"><ol start="2"><li>如果要將此 Demo import TestPodFramework，請先使用 pod init，新增一個 podfile</li><li>修改 podfile，最後重新 pod install</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">target <span class="string">&#x27;DemoTestPodFramework&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># Comment the next line if you don&#x27;t want to use dynamic frameworks</span></span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Pods for DemoTestPodFramework</span></span><br><span class="line">  pod <span class="string">&#x27;TestPodFramework&#x27;</span>, <span class="symbol">:path</span> =&gt; <span class="string">&#x27;../&#x27;</span> <span class="comment"># &lt;---- 請新增這行</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">target <span class="string">&#x27;TestPodFramework&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># Comment the next line if you don&#x27;t want to use dynamic frameworks</span></span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Pods for TestPodFramework</span></span><br><span class="line"></span><br><span class="line">  target <span class="string">&#x27;TestPodFrameworkTests&#x27;</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># Pods for testing</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="4"><li>打開 TestPodFramework.xcworkspace，恭喜大功告成了</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/9.jpg" class="" width="600"><h1 id="Demo-連結"><a href="#Demo-連結" class="headerlink" title="Demo 連結"></a>Demo 連結</h1><p><a href="https://github.com/pinkpika/TestPodFramework">TestPodFramework</a><br><a href="https://github.com/pinkpika/TestPodFramework/blob/main/TestPodFramework.podspec">TestPodFramework - podspec</a></p><hr><h1 id="新增-DocC-選用"><a href="#新增-DocC-選用" class="headerlink" title="新增 DocC (選用)"></a>新增 DocC (選用)</h1><ol><li>調整 TestPodFramework.docc 裡的 TestPodFramework.md</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/10.jpg" class="" width="600"><ol start="2"><li>點擊 Product &gt; Build Documentation，即可完成！</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/11.jpg" class="" width="600"><hr><h1 id="新增-UnitTest-選用"><a href="#新增-UnitTest-選用" class="headerlink" title="新增 UnitTest (選用)"></a>新增 UnitTest (選用)</h1><ol><li>新增 UnitTest 的 Scheme，TestPodFrameworkTests</li><li>編輯 TestPodFrameworkTests，執行測試即可完成！</li></ol><img src="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/12.jpg" class="" width="600">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由於官方的 pod lib create 產生的專案結構，模組的編譯會依賴於某個 Demo，&lt;br&gt;不適合單獨編譯 Framework 和做單元測試，匯入程式碼和圖片資源也要特別小心路徑，&lt;br&gt;也不便於建立多層子模組 Submodule 和進行管理，&lt;br&gt;所以我們來試著</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    <category term="Modular 模組化" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/Modular-%E6%A8%A1%E7%B5%84%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>IBDesignable 和 IBInspectable 的可視化 View</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/01/13/IBDesignable-%E5%92%8C-IBInspectable-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96-View/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/01/13/IBDesignable-%E5%92%8C-IBInspectable-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96-View/</id>
    <published>2022-01-13T05:17:09.000Z</published>
    <updated>2022-01-23T19:01:55.227Z</updated>
    
    <content type="html"><![CDATA[<p>在模組化的過程中，可能會遇到需要共用的 UI 元件，<br>一般的 CustomView: UIView 沒辦法顯示在 Storyboard 上，會呈現空空的 View，<br>如果想要在 Xcode 上直接顯示的話，就是需要使用 IBDesignable 和 IBInspectable。</p><h1 id="功能說明"><a href="#功能說明" class="headerlink" title="功能說明"></a>功能說明</h1><ul><li>IBDesignable：在客製化 View 前加上此關鍵字，Xcode 可直接顯示此 View 在 Storyboard。</li><li>IBInspectable：在客製化屬性上加上此關鍵字來告訴，Xcode 可直接顯示屬性在右方的 Interface Builder。</li></ul><h1 id="範例一-：可視的客製化View"><a href="#範例一-：可視的客製化View" class="headerlink" title="[範例一]：可視的客製化View"></a>[範例一]：可視的客製化View</h1><ul><li>步驟一：建立客製化 View，並標上 @IBDesignable，讓他變成可以在 Storyboard 被看到</li><li>步驟二：為了使我們的客製化類別能夠被即時的預覽，需要兩個initializers，<code>required init</code>、<code>override init</code></li><li>步驟三：加入標上 @IBInspectable 的屬性，並且<strong>此屬性一定要定義類型(例如: UIColor、Int、CGFloat)</strong><img src="/pinkblog/2022/01/13/IBDesignable-%E5%92%8C-IBInspectable-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96-View/1.jpg" class="" width="800"></li><li>步驟四：在 Storyboard 上加上新 View，並將 CustomClass 設定為 RainbowView，此時會跑出 Designables 為 Up to date 就是正確。<img src="/pinkblog/2022/01/13/IBDesignable-%E5%92%8C-IBInspectable-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96-View/2.jpg" class="" width="800"></li></ul><div class="note warning flat"><p>有時會失敗看到 Designables 為 Build Fail，需要清 DerivedData 或重啟 Xcode 或是 Editor &gt; Debug Selected Views / Refresh All Views</p></div><ul><li><p>下面是範例程式碼</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@IBDesignable</span> <span class="class"><span class="keyword">class</span> <span class="title">RainbowView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@IBInspectable</span> <span class="keyword">var</span> firstColor: <span class="type">UIColor</span> <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line">    <span class="keyword">@IBInspectable</span> <span class="keyword">var</span> secondColor: <span class="type">UIColor</span> <span class="operator">=</span> <span class="type">UIColor</span>.yellow</span><br><span class="line">    <span class="keyword">@IBInspectable</span> <span class="keyword">var</span> thirdColor: <span class="type">UIColor</span> <span class="operator">=</span> <span class="type">UIColor</span>.blue</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@IBInspectable</span> <span class="keyword">var</span> innerCircleRadius: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">80</span></span><br><span class="line">    <span class="keyword">@IBInspectable</span> <span class="keyword">var</span> middleCircleRadius: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">150</span></span><br><span class="line">    <span class="keyword">@IBInspectable</span> <span class="keyword">var</span> outerCircleRadius: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">215</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="function"><span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span>(<span class="keyword">_</span> <span class="params">rect</span>: <span class="type">CGRect</span>)</span> &#123;</span><br><span class="line">        addCirle(arcRadius: innerCircleRadius, capRadius: <span class="number">20</span>, color: <span class="keyword">self</span>.firstColor)</span><br><span class="line">        addCirle(arcRadius: middleCircleRadius, capRadius: <span class="number">20</span>, color: <span class="keyword">self</span>.secondColor)</span><br><span class="line">        addCirle(arcRadius: outerCircleRadius, capRadius: <span class="number">20</span>, color: <span class="keyword">self</span>.thirdColor)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addCirle</span>(<span class="params">arcRadius</span>: <span class="type">CGFloat</span>, <span class="params">capRadius</span>: <span class="type">CGFloat</span>, <span class="params">color</span>: <span class="type">UIColor</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 中心位置</span></span><br><span class="line">        <span class="keyword">let</span> <span class="type">X</span> <span class="operator">=</span> <span class="keyword">self</span>.bounds.midX</span><br><span class="line">        <span class="keyword">let</span> <span class="type">Y</span> <span class="operator">=</span> <span class="keyword">self</span>.bounds.midY</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 上半圓</span></span><br><span class="line">        <span class="keyword">let</span> pathBottom <span class="operator">=</span> <span class="type">UIBezierPath</span>(ovalIn: <span class="type">CGRect</span>(x:(<span class="type">X</span> <span class="operator">-</span> (arcRadius<span class="operator">/</span><span class="number">2</span>)), y:(<span class="type">Y</span> <span class="operator">-</span> (arcRadius<span class="operator">/</span><span class="number">2</span>)), width:arcRadius, height:arcRadius)).cgPath</span><br><span class="line">        <span class="keyword">self</span>.addOval(lineWidth: <span class="number">20.0</span>, path: pathBottom, strokeStart: <span class="number">0</span>, strokeEnd: <span class="number">0.5</span>, strokeColor: color, fillColor: <span class="type">UIColor</span>.clear, shadowRadius: <span class="number">0</span>, shadowOpacity: <span class="number">0</span>, shadowOffsset: <span class="type">CGSize</span>.zero)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 左邊的小圓點</span></span><br><span class="line">        <span class="keyword">let</span> pathMiddle <span class="operator">=</span> <span class="type">UIBezierPath</span>(ovalIn: <span class="type">CGRect</span>(x:(<span class="type">X</span> <span class="operator">-</span> (capRadius<span class="operator">/</span><span class="number">2</span>)) <span class="operator">-</span> (arcRadius<span class="operator">/</span><span class="number">2</span>), y:(<span class="type">Y</span> <span class="operator">-</span> (capRadius<span class="operator">/</span><span class="number">2</span>)), width:capRadius, height:capRadius)).cgPath</span><br><span class="line">        <span class="keyword">self</span>.addOval(lineWidth: <span class="number">0.0</span>, path: pathMiddle, strokeStart: <span class="number">0</span>, strokeEnd: <span class="number">1.0</span>, strokeColor: color, fillColor: color, shadowRadius: <span class="number">5.0</span>, shadowOpacity: <span class="number">0.5</span>, shadowOffsset: <span class="type">CGSize</span>.zero)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下半圓</span></span><br><span class="line">        <span class="keyword">let</span> pathTop <span class="operator">=</span> <span class="type">UIBezierPath</span>(ovalIn: <span class="type">CGRect</span>(x:(<span class="type">X</span> <span class="operator">-</span> (arcRadius<span class="operator">/</span><span class="number">2</span>)), y:(<span class="type">Y</span> <span class="operator">-</span> (arcRadius<span class="operator">/</span><span class="number">2</span>)), width:arcRadius, height:arcRadius)).cgPath</span><br><span class="line">        <span class="keyword">self</span>.addOval(lineWidth: <span class="number">20.0</span>, path: pathTop, strokeStart: <span class="number">0.5</span>, strokeEnd: <span class="number">1.0</span>, strokeColor: color, fillColor: <span class="type">UIColor</span>.clear, shadowRadius: <span class="number">0</span>, shadowOpacity: <span class="number">0</span>, shadowOffsset: <span class="type">CGSize</span>.zero)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///利用路徑畫圖</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addOval</span>(<span class="params">lineWidth</span>: <span class="type">CGFloat</span>, <span class="params">path</span>: <span class="type">CGPath</span>, <span class="params">strokeStart</span>: <span class="type">CGFloat</span>, <span class="params">strokeEnd</span>: <span class="type">CGFloat</span>, <span class="params">strokeColor</span>: <span class="type">UIColor</span>, <span class="params">fillColor</span>: <span class="type">UIColor</span>, <span class="params">shadowRadius</span>: <span class="type">CGFloat</span>, <span class="params">shadowOpacity</span>: <span class="type">Float</span>, <span class="params">shadowOffsset</span>: <span class="type">CGSize</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> arc <span class="operator">=</span> <span class="type">CAShapeLayer</span>()</span><br><span class="line">        arc.lineWidth <span class="operator">=</span> lineWidth</span><br><span class="line">        arc.path <span class="operator">=</span> path</span><br><span class="line">        arc.strokeStart <span class="operator">=</span> strokeStart</span><br><span class="line">        arc.strokeEnd <span class="operator">=</span> strokeEnd</span><br><span class="line">        arc.strokeColor <span class="operator">=</span> strokeColor.cgColor</span><br><span class="line">        arc.fillColor <span class="operator">=</span> fillColor.cgColor</span><br><span class="line">        arc.shadowColor <span class="operator">=</span> <span class="type">UIColor</span>.black.cgColor</span><br><span class="line">        arc.shadowRadius <span class="operator">=</span> shadowRadius</span><br><span class="line">        arc.shadowOpacity <span class="operator">=</span> shadowOpacity</span><br><span class="line">        arc.shadowOffset <span class="operator">=</span> shadowOffsset</span><br><span class="line">        layer.addSublayer(arc)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>除此之外，在 Xcdoe 直接調整屬性可以讓他直接改變預覽呦，十分方便！</p></li></ul><img src="/pinkblog/2022/01/13/IBDesignable-%E5%92%8C-IBInspectable-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96-View/3.jpg" class="" width="800"><hr><h1 id="範例二-：可視的客製化View並綁定使用Xib"><a href="#範例二-：可視的客製化View並綁定使用Xib" class="headerlink" title="[範例二]：可視的客製化View並綁定使用Xib"></a>[範例二]：可視的客製化View並綁定使用Xib</h1><ul><li><p>步驟一：建立客製化View，並標上@IBDesignable，且加上一個contentView</p></li><li><p>步驟二：為了使我們的客製化類別能夠被即時的預覽，需要這兩個initializers，<code>required init</code>、<code>override init</code></p></li><li><p>步驟三：加上利用Nib初始化View</p></li><li><p>步驟四：加入標上 @IBInspectable 的屬性，並且<strong>此屬性一定要定義類型(例如: UIColor、Int、CGFloat)</strong></p><ul><li>下面是範例程式碼<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@IBDesignable</span> <span class="class"><span class="keyword">class</span> <span class="title">InputBarView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="comment">///內容View</span></span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> contentView: <span class="type">UIView</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///標題Label</span></span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> titleLabel: <span class="type">UILabel</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///標題文字</span></span><br><span class="line">    <span class="keyword">@IBInspectable</span> <span class="keyword">var</span> titleText: <span class="type">String</span>?&#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> titleLabel.text</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            titleLabel.text <span class="operator">=</span> newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="function"><span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">        initViewFromNib()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        initViewFromNib()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 利用Nib初始化View</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">initViewFromNib</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> bundle <span class="operator">=</span> <span class="type">Bundle</span>(for: <span class="built_in">type</span>(of: <span class="keyword">self</span>))</span><br><span class="line">        <span class="keyword">let</span> nib <span class="operator">=</span> <span class="type">UINib</span>(nibName:<span class="string">&quot;<span class="subst">\(<span class="built_in">type</span>(of: <span class="keyword">self</span>))</span>&quot;</span>, bundle: bundle)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> view <span class="operator">=</span> nib.instantiate(withOwner: <span class="keyword">self</span>, options: <span class="literal">nil</span>)[<span class="number">0</span>] <span class="keyword">as?</span> <span class="type">UIView</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.contentView <span class="operator">=</span> view</span><br><span class="line">            <span class="keyword">self</span>.contentView.frame <span class="operator">=</span> bounds</span><br><span class="line">            <span class="keyword">self</span>.addSubview(contentView)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 完成設定Nib的事件</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.awakeFromNib()</span><br><span class="line">        <span class="comment">//可以在這做一些子代View設定....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>步驟五：開啟 Xib 必做兩件事</p><ul><li>第一件事：設定 File’s owner 的 CustomClass<img src="/pinkblog/2022/01/13/IBDesignable-%E5%92%8C-IBInspectable-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96-View/4.jpg" class="" width="800"></li><li>第二件事：連結 File’s owner 到 View<img src="/pinkblog/2022/01/13/IBDesignable-%E5%92%8C-IBInspectable-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96-View/5.jpg" class="" width="800"></li><li>客製化內部View，此處新增一個 Label (依照狀況選用)</li></ul></li><li><p>步驟六：在 Storyboard 上加上新 View，並將 CustomClass 設定為 InputBarView，並且去設定 Title text</p><img src="/pinkblog/2022/01/13/IBDesignable-%E5%92%8C-IBInspectable-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96-View/6.jpg" class="" width="800"><img src="/pinkblog/2022/01/13/IBDesignable-%E5%92%8C-IBInspectable-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96-View/7.jpg" class="" width="800"></li></ul><div class="note warning flat"><p>有時會失敗看到 Designables 為 Build Fail，需要清 DerivedData 或重啟 Xcode 或是 Editor &gt; Debug Selected Views / Refresh All Views</p></div><div class="note info flat"><p>其實用 Xib 在模組化的過程中，需要額外處理 import bundle 的問題，所以沒有很建議這樣做<br>所以漸漸地我也已改習慣用純程式碼，未來的天下 SwiftUI，也類似純程式碼的感覺，本身就自帶預覽功能，方便許多</p></div><hr><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.appcoda.com.tw/ibdesignable-ibinspectable/">利用IBDesignable和IBInspectable建立客製化元件</a></li><li><a href="https://medium.com/@mikru168/ios-%E5%88%A9%E7%94%A8-ibdesignable-%E5%92%8C-ibinspectable-%E4%BE%86%E5%BB%B6%E4%BC%B8-storyboard-%E7%9A%84%E5%B1%AC%E6%80%A7-b408197ac9ec">iOS- 利用 IBDesignable 和 IBInspectable 來延伸 Storyboard 的屬性</a></li><li><a href="https://medium.com/zenchef-tech-and-product/how-to-visualize-reusable-xibs-in-storyboards-using-ibdesignable-c0488c7f525d">How to visualize reusable xibs in storyboards using IBDesignable</a></li><li><a href="https://supereasyapps.com/blog/2014/12/15/create-an-ibdesignable-uiview-subclass-with-code-from-an-xib-file-in-xcode-6">Create an IBDesignable UIView subclass with code from an XIB file</a></li><li><a href="http://blog.kent-chiu.com/2015/02/24/using-xib-with-sotryboard.html">在storyboard裡使用xib的view</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在模組化的過程中，可能會遇到需要共用的 UI 元件，&lt;br&gt;一般的 CustomView: UIView 沒辦法顯示在 Storyboard 上，會呈現空空的 View，&lt;br&gt;如果想要在 Xcode 上直接顯示的話，就是需要使用 IBDesignable 和 IBInsp</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    <category term="Modular 模組化" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/Modular-%E6%A8%A1%E7%B5%84%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>建立 Local Podspec</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/</id>
    <published>2022-01-09T06:30:25.000Z</published>
    <updated>2022-01-23T18:37:58.631Z</updated>
    
    <content type="html"><![CDATA[<p>開始學習建立 Podspec 模組或三方，<br>一開始往往都是從 Local 建立的，<br>可以依照下面的步驟建立屬於自己的模組，<br>記得將這份模組用 Git 進行版控開發，讓別人可以 Clone 下來使用 ，<br>未來甚至可以上傳到公開的 CocoaPods Specs 裡讓大家下載。</p><h1 id="建立方式"><a href="#建立方式" class="headerlink" title="建立方式"></a>建立方式</h1><ol><li><p>終端機執行 <code>pod lib create TestPodFramework</code></p></li><li><p>依照需求回答一系列問題，最後建立專案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">What platform <span class="keyword">do</span> you want to use?? [ iOS / macOS ]</span><br><span class="line">&gt; iOS</span><br><span class="line">What language <span class="keyword">do</span> you want to use?? [ Swift / ObjC ]</span><br><span class="line">&gt; Swift</span><br><span class="line">Would you like to include a demo application <span class="keyword">with</span> your library? [ Yes / No ]</span><br><span class="line">&gt; Yes</span><br><span class="line">Which testing frameworks will you use? [ Quick / None ]</span><br><span class="line">&gt; None</span><br><span class="line">Would you like to <span class="keyword">do</span> view based testing? [ Yes / No ]</span><br><span class="line">&gt; No</span><br></pre></td></tr></table></figure></li><li><p>打開專案會看到 Demo 和 Framework 本身</p><img src="/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/2-1.jpg" class="" width="400"></li><li><p>替換 Development Pods 內的檔案或程式碼，新增自己要的類別或功能在 <code>Class</code> 資料夾(注意一定要在這)</p><img src="/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/2-2.jpg" class="" width="400"><img src="/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/2-3.jpg" class="" width="600"><img src="/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/2-4.jpg" class="" width="600"></li><li><p>重新 <code>pod install</code>，即可直接編譯 Demo 測試功能</p><ul><li>(記得使用 Git 進行版控，以確保每個成員使用的版本)<img src="/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/2-5.jpg" class="" width="600"></li></ul></li></ol><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><ol><li><p>當其他專案要使用時，將 TestProject 和 TestPodFramework 放在同一層</p><img src="/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/2-6.jpg" class="" width="400"></li><li><p>新增 TestProject 的 podFile，並加上 <code>pod &#39;TestPodFramework&#39;, :path =&gt; &#39;../TestPodFramework&#39;</code> 意思就是讀取本地模組</p><img src="/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/2-7.jpg" class="" width="600"></li><li><p>重新 <code>pod install</code>，最後 import Framekwork 就可以使用</p><img src="/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/2-8.jpg" class="" width="600"></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;開始學習建立 Podspec 模組或三方，&lt;br&gt;一開始往往都是從 Local 建立的，&lt;br&gt;可以依照下面的步驟建立屬於自己的模組，&lt;br&gt;記得將這份模組用 Git 進行版控開發，讓別人可以 Clone 下來使用 ，&lt;br&gt;未來甚至可以上傳到公開的 CocoaPods S</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    <category term="Modular 模組化" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/Modular-%E6%A8%A1%E7%B5%84%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 模組化架構 (Modular Architecture in iOS)</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/</id>
    <published>2022-01-09T02:04:43.000Z</published>
    <updated>2022-01-23T19:10:48.463Z</updated>
    
    <content type="html"><![CDATA[<p>當面對需求相同或相似的大量 App，例如公司的 40 隻 App 都需要登入功能，<br>此時使用模組化開發是最適合的，可以大量減少工時，<br>這裡記錄當初在研究模組化的發展歷程，可以了解以前發生的問題。</p><p>這裡直接排除 <strong>複製程式碼的共用法</strong>，沒有用到實質上相同一份程式碼，就不太算是模組化。</p><h1 id="第一期-：Framework-Project"><a href="#第一期-：Framework-Project" class="headerlink" title="[第一期]：Framework Project"></a>[第一期]：Framework Project</h1><h2 id="利用原生的方式建立-Framework，並且對它進行版控，他人可以使用或新增功能"><a href="#利用原生的方式建立-Framework，並且對它進行版控，他人可以使用或新增功能" class="headerlink" title="利用原生的方式建立 Framework，並且對它進行版控，他人可以使用或新增功能"></a>利用原生的方式建立 Framework，並且對它進行版控，他人可以使用或新增功能</h2><h2 id="建立方式"><a href="#建立方式" class="headerlink" title="建立方式"></a>建立方式</h2><ol><li>建立一個 Framekwork 專案 ( 例如: TestFrameworkKit )</li><li>內部建立任意程式碼，並確認可以編譯成功即可，<ul><li>(記得使用 Git 進行版控，以確保每個成員使用的版本)</li></ul></li></ol><img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/1-1.jpg" class="" width="600"><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li>將 xcodeproj 拉進 App 專案</li><li>設定專案的 Framework, Libraries, and Embedded Content，加入剛剛的 Framekwork</li></ol><img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/1-2.jpg" class="" width="600"><ol start="3"><li>最後 import Framekwork 就可以使用</li></ol><img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/1-3.jpg" class="" width="600"><h2 id="開發方式"><a href="#開發方式" class="headerlink" title="開發方式"></a>開發方式</h2><img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/1-flow.png" class="" width="600"><h2 id="相關應用"><a href="#相關應用" class="headerlink" title="相關應用"></a>相關應用</h2><ul><li><a href="/pinkblog/2022/01/13/IBDesignable-%E5%92%8C-IBInspectable-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96-View/" title="IBDesignable 和 IBInspectable 的可視化 View">IBDesignable 和 IBInspectable 的可視化 View</a></li></ul><hr><div class="note info flat"><p>🤔 遇到問題: 模組無法使用三方(ex.FacebookSDK)，專案會發生編譯和 Link 的問題</p></div><p>有以下兩種最常見的方式</p><h2 id="Umbrella-Framework-的優缺"><a href="#Umbrella-Framework-的優缺" class="headerlink" title="Umbrella Framework 的優缺"></a>Umbrella Framework 的優缺</h2><ul><li>[優點]：<ol><li>自由的加入各種 SourceCode 或已編譯 Framework</li></ol></li><li>[缺點]：<ol><li>官方不推薦使用，理由是 framework 不應包含整個其他的 framework，應保持檔案乾淨</li><li>做法混亂不一，各個 Xcode 或 iOS 版本做法有些許差距，難以維護並使用….</li><li>做法冗長複雜，難以加入工作流程，雖然可以用 Script 解決，但也可能有因三方或 Xcode 版本產生其他問題</li><li>因內部三方被隱藏，而產生版本衝突的隱藏危機<ul><li>ex.有個 UmbrellaA 包含 FB framework(v2.0)，有個 UmbrellaB 包含 FB framework(v3.0)，可能不同版本內部實作有差異，而產生不預期的錯誤。</li></ul></li><li>內部三方難更新</li></ol></li></ul><h2 id="Cocoapods-Dependency-的優缺"><a href="#Cocoapods-Dependency-的優缺" class="headerlink" title="Cocoapods Dependency 的優缺"></a>Cocoapods Dependency 的優缺</h2><ul><li>[優點]：<ol><li>自由的 dependency 官方 cocoapods 上的三方或是的 local podSpec。</li><li>如果有 dependency 相同三方卻不同版本會有錯誤提示，不會有不同版本的錯誤！！！<ul><li>ex.手機專案裡 <code>pod &#39;Flurry-iOS-SDK/FlurrySDK&#39;, &#39;~&gt; 9.0.0&#39;</code>，在 TestFrameworkKit 裡 <code>dependency &#39;Flurry-iOS-SDK/FlurrySDK&#39;, &#39;~&gt; 8.0.0&#39;</code>，會有錯誤提示</li></ul></li><li>因為三方統一在 Pod 裡，所以 TestFrameworkKit 用的三方，手機專案可以直接使用！！！<ul><li>ex.手機專案裡不需要再 pod Ｆlurry、FB….，因為 TestFrameworkKit 已經 dependency 過, 只需要專注 pod 各自手機專案需要的特殊三方</li></ul></li><li>podSpec 專案架構與設定極為簡單，只要有 podspec 檔即可！！！</li></ol></li></ul><hr><h1 id="第二期-：Local-Podspec"><a href="#第二期-：Local-Podspec" class="headerlink" title="[第二期]：Local Podspec"></a>[第二期]：Local Podspec</h1><h2 id="利用-Local-Podspec-的方式建立-Framework，-一樣對它進行版控，他人可以使用或新增功能"><a href="#利用-Local-Podspec-的方式建立-Framework，-一樣對它進行版控，他人可以使用或新增功能" class="headerlink" title="利用 Local Podspec 的方式建立 Framework， 一樣對它進行版控，他人可以使用或新增功能"></a>利用 Local Podspec 的方式建立 Framework， 一樣對它進行版控，他人可以使用或新增功能</h2><h2 id="建立方式-使用方式"><a href="#建立方式-使用方式" class="headerlink" title="建立方式+使用方式"></a>建立方式+使用方式</h2><ul><li>因為步驟較長所以另外開一篇文章 =&gt; <a href="/pinkblog/2022/01/09/%E5%BB%BA%E7%AB%8B-Local-Podspec/" title="建立 Local Podspec">建立 Local Podspec</a><img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/2.jpg" class="" width="600"></li></ul><h2 id="開發方式-1"><a href="#開發方式-1" class="headerlink" title="開發方式"></a>開發方式</h2><img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/2-flow.png" class="" width="600"><h2 id="相關應用-1"><a href="#相關應用-1" class="headerlink" title="相關應用"></a>相關應用</h2><ul><li><a href="/pinkblog/2022/01/16/Podspec-%E8%AA%BF%E6%95%B4%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B/" title="Podspec 調整資料夾結構">Podspec 調整資料夾結構</a></li><li><a href="/pinkblog/2022/01/16/Podspec-%E5%85%A7%E4%BD%BF%E7%94%A8%E4%B8%89%E6%96%B9%E3%80%81Asset%E3%80%81Storyboard%E3%80%81Xib/" title="Podspec 內使用三方、Asset、Storyboard、Xib">Podspec 內使用三方、Asset、Storyboard、Xib</a></li></ul><hr><div class="note info flat"><p>🤔 遇到問題: 單一模組高度耦合，登入功能升版時，推播功能也必須升版，需要進行多模組的拆分</p></div><hr><h1 id="第三期-：Podspec-CocoaPods-Private-Specs"><a href="#第三期-：Podspec-CocoaPods-Private-Specs" class="headerlink" title="[第三期]：Podspec + CocoaPods Private Specs"></a>[第三期]：Podspec + CocoaPods Private Specs</h1><h2 id="建立-CocoaPods-Private-Specs，由它來管理所有內部三方"><a href="#建立-CocoaPods-Private-Specs，由它來管理所有內部三方" class="headerlink" title="建立 CocoaPods Private Specs，由它來管理所有內部三方"></a>建立 CocoaPods Private Specs，由它來管理所有內部三方</h2><p>CocoaPods Specs 就是用來集中管理多個 Podspec 版本控制的 Repository，簡單來說就是一份三方清單<br>最有名且公開的就是官方的 <a href="https://github.com/CocoaPods/Specs">CocoaPodsSpecs</a><br>你當然可以建立自己的三方清單，例如 <a href="https://github.com/pinkpika/PinkPodsSpecs">PinkPodsSpecs</a><br>用 Specs 指定想要的三方 Podspec，不用自己下載、不用指定位置，就像使用外部三方一樣方便！</p><p>只要有 Git 就可開發 CocoaPods Specs</p><ul><li>如果使用公開 GitHub，就是公開的三方清單</li><li>如果使用私有 GitHub 或是公司內部 GitLab，就是私有內部的三方清單 ( 通常公司內部都需要這種的 )</li></ul><h2 id="建立方式-1"><a href="#建立方式-1" class="headerlink" title="建立方式"></a>建立方式</h2><ol><li><p>先決定好是否要公開清單，並決定好在哪裡建立 ( 這裡示範使用公開 GitHub )</p></li><li><p>先建立一個公開 Repo，叫做 <a href="https://github.com/pinkpika/PinkPodsSpecs">PinkPodsSpecs</a></p></li><li><p>同時也要建立一個公開 Repo 放 Framework，叫做 <a href="https://github.com/pinkpika/TestPodFramework">TestPodFramework</a></p><ul><li>這裡建議將 TestPodFramework 先新增一個 README.md，因為預設 Repo 是沒有分支的，容易造成後面步驟錯誤</li></ul></li><li><p>調整 <strong>[第二期] Local Podspc</strong> <code>TestPodFramework</code> 的 <code>TestPodFramework.podspec</code></p><ul><li>s.homepage 改成 Framework 網址</li><li>s.source 改成程式碼 Clone 網址<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.description      = <span class="string">&#x27;TestPodFramework&#x27;</span></span><br><span class="line">s.homepage         = <span class="string">&#x27;https://github.com/pinkpika/TestPodFramework&#x27;</span></span><br><span class="line">s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">&#x27;MIT&#x27;</span>, <span class="symbol">:file</span> =&gt; <span class="string">&#x27;LICENSE&#x27;</span> &#125;</span><br><span class="line">s.author           = &#123; <span class="string">&#x27;PinkPika&#x27;</span> =&gt; <span class="string">&#x27;ooxx@gmail.com&#x27;</span> &#125;</span><br><span class="line">s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">&#x27;git@github.com:pinkpika/TestPodFramework.git&#x27;</span>, <span class="symbol">:tag</span> =&gt; s.version.to_s &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>將 <code>TestPodFramework</code> 上傳 push 程式碼到 GitHub，並且打上 tag 為目前的版號，例如’0.1.0’</p><img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/3-1.jpg" class="" width="600"></li><li><p>在終端機執行下面指令，下載三方清單</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo add PinkPodsSpecs git@github.com:pinkpika/PinkPodsSpecs.git</span><br></pre></td></tr></table></figure></li><li><p>在 <code>TestPodFramework</code> 資料夾目錄執行下面指令，驗證程式碼並且發版加入三方清單</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo push PinkPodsSpecs TestPodFramework.podspec --allow-warnings --verbose</span><br></pre></td></tr></table></figure></li><li><p>如果看到 <a href="https://github.com/pinkpika/PinkPodsSpecs">PinkPodsSpecs</a> 內有 <code>TestPodFramework</code> 就算成功！</p><img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/3-2.jpg" class="" width="600"></li></ol><h2 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h2><ul><li><p>使用三方清單前的 PodFile：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">&#x27;TestPodFramework&#x27;</span>, <span class="symbol">:path</span> =&gt; <span class="string">&#x27;../TestPodFramework&#x27;</span> (第一種)</span><br><span class="line">pod <span class="string">&#x27;Charts&#x27;</span>, <span class="symbol">:git</span> =&gt; <span class="string">&#x27;git@github.com:danielgindi/Charts.git&#x27;</span> (第二種)</span><br></pre></td></tr></table></figure></li><li><p>使用三方清單後的 PodFile：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source <span class="string">&#x27;git@github.com:pinkpika/PinkPodsSpecs.git&#x27;</span></span><br><span class="line">source <span class="string">&#x27;https://github.com/CocoaPods/Specs.git&#x27;</span></span><br><span class="line">pod <span class="string">&#x27;TestPodFramework&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>本機使用者的隱藏資料夾，有”兩個很重要的資料夾”</p><ul><li><strong>三方清單</strong> 的快取資料夾 <ul><li>也就是清單的 Local 快取(有問題可以刪掉再載)<img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/3-3.jpg" class="" width="800"></li></ul></li><li><strong>三方程式碼</strong> 的快取資料夾<ul><li>也就是程式碼的 Local 快取(也因為他們所以下載過的三方再次下載會特別快)<img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/3-4.jpg" class="" width="800"></li></ul></li></ul></li></ul><h2 id="開發方式-2"><a href="#開發方式-2" class="headerlink" title="開發方式"></a>開發方式</h2><img src="/pinkblog/2022/01/09/iOS-%E6%A8%A1%E7%B5%84%E5%8C%96%E6%9E%B6%E6%A7%8B-Modular-Architecture-in-iOS/3-flow.png" class="" width="600"><ul><li><p>Author要做的事：</p><ol><li><strong>Push Code：上傳模組程式碼</strong><ul><li>1 確認模組 repo 最新的 Master 就是你要發佈的程式碼版本 </li><li>2 確認模組 repo 最新的 Master 的 podspec 檔的版本號是你要的新版號 <code>s.version = &quot;1.3.0&quot;</code></li><li>3 以上兩點都 OK，就加上新版號 tag 在 Master 上 (ex:1.3.0)</li></ul></li><li><strong>Push Spec：發布模組</strong><ul><li>檢查podspec是否正確<ul><li>–allow-warnings =&gt; 允許警告</li><li>–verbose =&gt; 詳細輸出執行步驟<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint --allow-warnings --verbose</span><br></pre></td></tr></table></figure></li></ul></li><li>發版: <font color="#FF5856">注意此指令會Match Version &amp; Validate Spec &amp; Build Code，有問題請修正</font> </li></ul><ul><li>法一<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo push PinkPodsSpecs TestPodFramework.podspec --allow-warnings --verbose</span><br></pre></td></tr></table></figure></li><li>法二(設定sources)(上面有時會因為模組用到外部三方導致 push 失敗)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo push PinkPodsSpecs TestPodFramework.podspec --allow-warnings --verbose --sources=&#x27;https://github.com/CocoaPods/Specs.git,git@github.com:pinkpika/PinkPodsSpecs.git&#x27;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>Member要做的事：</p><ol start="3"><li><strong>Add or Update PinkPodsSpecs:更新模組清單</strong><ul><li>第一次使用，請直接下載 PinkPodsSpecs<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo add PinkPodsSpecs git@github.com:pinkpika/PinkPodsSpecs.git</span><br></pre></td></tr></table></figure></li><li>如果下載過，未來只要更新版本清單即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo update PinkPodsSpecs</span><br></pre></td></tr></table></figure></li><li>顯示 Local 的 Pod repo 清單<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>Pod Install:安裝模組</strong><ul><li>更改Podfile<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source &#x27;git@github.com:pinkpika/PinkPodsSpecs.git&#x27;</span><br><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line">pod &#x27;TestPodFramework&#x27;</span><br></pre></td></tr></table></figure></li><li>單純安裝依賴(依照Podfile.lock)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure></li><li>更新依賴(建立新的Podfile.lock)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod update</span><br><span class="line">pod update TestPodFramework</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><hr><div class="note info flat"><p>🤔 遇到問題: 如何額外打包模組，不讓使用者知道內部的實作方式呢</p></div><hr><h1 id="第四期-：Podspec-CocoaPods-Private-Specs-Carthage"><a href="#第四期-：Podspec-CocoaPods-Private-Specs-Carthage" class="headerlink" title="[第四期]：Podspec + CocoaPods Private Specs + Carthage"></a>[第四期]：Podspec + CocoaPods Private Specs + Carthage</h1><h2 id="利用-Carthage-封裝打包各個模組，安全的提供給外包或是合作廠商"><a href="#利用-Carthage-封裝打包各個模組，安全的提供給外包或是合作廠商" class="headerlink" title="利用 Carthage 封裝打包各個模組，安全的提供給外包或是合作廠商"></a>利用 Carthage 封裝打包各個模組，安全的提供給外包或是合作廠商</h2><h2 id="相關應用-未來會補文章"><a href="#相關應用-未來會補文章" class="headerlink" title="相關應用(未來會補文章):"></a>相關應用(未來會補文章):</h2><ul><li>使用 Carthage 打包模組的經驗紀錄</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;當面對需求相同或相似的大量 App，例如公司的 40 隻 App 都需要登入功能，&lt;br&gt;此時使用模組化開發是最適合的，可以大量減少工時，&lt;br&gt;這裡記錄當初在研究模組化的發展歷程，可以了解以前發生的問題。&lt;/p&gt;
&lt;p&gt;這裡直接排除 &lt;strong&gt;複製程式碼的共用法&lt;/</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    <category term="Modular 模組化" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/Modular-%E6%A8%A1%E7%B5%84%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-GA+SEO+Liker</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/01/09/Hexo-GA-SEO-Liker/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/01/09/Hexo-GA-SEO-Liker/</id>
    <published>2022-01-08T17:52:38.000Z</published>
    <updated>2022-01-23T19:07:00.812Z</updated>
    
    <content type="html"><![CDATA[<p>分析網站+搜尋優化+提供讚賞的功能</p><h1 id="設定GoogleAnalytics"><a href="#設定GoogleAnalytics" class="headerlink" title="設定GoogleAnalytics"></a>設定GoogleAnalytics</h1><p><strong>目的：可用於分析網站數據，例如網站造訪人數、哪篇文章最多人看等等</strong></p><p>雖然可以單獨使用 Google Analytics，但為了以後可能用到更多功能，所以可以直接去 Firebase 建立專案使用，<br>Firebase 是一個方便的後端功能集合體，讓沒有後端資源的工程師也可以開發各種後端功能，包含 DB、Analytic、Config 等等功能。</p><ol><li>建立 Firebase 專案</li><li>在該專案建立 Web 應用程式</li><li>在 Google Analytics 功能分頁，點擊紅框處跳轉詳細頁面</li></ol><img src="/pinkblog/2022/01/09/Hexo-GA-SEO-Liker/ga1.jpg" class="" width="800"><ol start="4"><li>在 Google Analytics 詳細頁面，找到<code>評估 ID</code></li></ol><img src="/pinkblog/2022/01/09/Hexo-GA-SEO-Liker/ga2.jpg" class="" width="800"><ol start="5"><li>編輯 themes/landscape/_config.yml</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google_analytics: `評估 ID`</span><br></pre></td></tr></table></figure><ol start="6"><li>重新發佈後等個幾天就有數據啦！</li></ol><hr><h1 id="設定SEO"><a href="#設定SEO" class="headerlink" title="設定SEO"></a>設定SEO</h1><p><strong>目的：讓自己的網站更容易被搜尋到</strong></p><p>有很多方式可以優化 SEO ( 搜尋引擎最佳化 )，這裡先做一個最簡單的，也就是 Google Search Console。</p><ol><li>打開 <a href="https://search.google.com/search-console/welcome">Google Search Console</a></li><li>在右邊<code>網址前置字元</code>，輸入自己網站的網誌，例如：<code>https://pinkpika.github.io/pinkblog/</code></li></ol><img src="/pinkblog/2022/01/09/Hexo-GA-SEO-Liker/seo.jpg" class="" width="800"><ol start="3"><li>如果你有做 GoogleAnalytics，理論上他就會跟你說你的網站已驗證過，不用再設定任何程式碼，很方便吧！</li></ol><hr><h1 id="設定Liker"><a href="#設定Liker" class="headerlink" title="設定Liker"></a>設定Liker</h1><p><strong>目的：加入讚賞公民，不僅可以贊助他人、也可以讓自己接受贊助，還可以利用讚賞書籤記錄自己喜歡的文章</strong></p><ol><li>註冊<a href="https://like.co/in/?postlogin=1">Like Coin 登入</a></li><li>編輯 themes/landscape/layout/_partial/article.ejs，在 post.content 下方加入 iframe 連結 (記得換掉中間的LikerID)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;e-content article-entry&quot;</span> itemprop=<span class="string">&quot;articleBody&quot;</span>&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (post.excerpt &amp;&amp; index)&#123; %&gt;</span><br><span class="line">    &lt;%- post.excerpt %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (theme.excerpt_link)&#123; %&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;article-more-link&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- url_for(post.path) %&gt;#more&quot;</span>&gt;</span>&lt;%= theme.excerpt_link %&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line">    &lt;%- post.content %&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;230px&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;player&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://button.like.co/in/embed/這裡換成你的LikerID/button/?referrer=&lt;%- post.permalink %&gt;&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &lt;% &#125; %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>重新發佈後就可！</li></ol><p>其實網路上有太多跟 Liker 有關的文章，這邊就不贅述了，有機會再整理相關的東西</p><ul><li>相關網站<ul><li><a href="https://about.like.co/">Like Coin 主頁</a></li><li><a href="https://like.co/in/?postlogin=1">Like Coin 登入</a></li><li><a href="https://liker.land/">Liker Land</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分析網站+搜尋優化+提供讚賞的功能&lt;/p&gt;
&lt;h1 id=&quot;設定GoogleAnalytics&quot;&gt;&lt;a href=&quot;#設定GoogleAnalytics&quot; class=&quot;headerlink&quot; title=&quot;設定GoogleAnalytics&quot;&gt;&lt;/a&gt;設定GoogleAn</summary>
      
    
    
    
    <category term="Web Development" scheme="http://pinkpika.github.io/pinkblog/categories/Web-Development/"/>
    
    <category term="Hexo" scheme="http://pinkpika.github.io/pinkblog/categories/Web-Development/Hexo/"/>
    
    
  </entry>
  
</feed>
