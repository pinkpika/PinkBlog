<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pink Blog</title>
  <icon>https://www.gravatar.com/avatar/5c6581fa74d8841029b0c88328e88401</icon>
  <subtitle>Simplicity is the soul of efficiency.</subtitle>
  <link href="http://pinkpika.github.io/pinkblog/atom.xml" rel="self"/>
  
  <link href="http://pinkpika.github.io/pinkblog/"/>
  <updated>2022-12-11T06:27:39.946Z</updated>
  <id>http://pinkpika.github.io/pinkblog/</id>
  
  <author>
    <name>pinkpika</name>
    <email>tim801217@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不同 App 之間共用資料</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/11/24/%E4%B8%8D%E5%90%8C-App-%E4%B9%8B%E9%96%93%E5%85%B1%E7%94%A8%E8%B3%87%E6%96%99/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/11/24/%E4%B8%8D%E5%90%8C-App-%E4%B9%8B%E9%96%93%E5%85%B1%E7%94%A8%E8%B3%87%E6%96%99/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-12-11T06:27:39.946Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>不同 App 之間原本是無法溝通的，但是可運用一些技術來達到效果，運用場景像是同一間公司出的 App 可以互通登入狀態，或是 App 需要與 App Extension 共用資料等等。</p></div><h1 id="官方文件"><a href="#官方文件" class="headerlink" title="官方文件"></a>官方文件</h1><p>Apple 有官方文件解釋到相關技術 - <a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps">Sharing Access to Keychain Items Among a Collection of Apps</a></p><ul><li>兩隻 App 間無法共用資料的狀況</li></ul><img src="/pinkblog/2022/11/24/%E4%B8%8D%E5%90%8C-App-%E4%B9%8B%E9%96%93%E5%85%B1%E7%94%A8%E8%B3%87%E6%96%99/doc1.png" class="" width="400"><ul><li>兩隻 App 間共用資料的狀況</li></ul><img src="/pinkblog/2022/11/24/%E4%B8%8D%E5%90%8C-App-%E4%B9%8B%E9%96%93%E5%85%B1%E7%94%A8%E8%B3%87%E6%96%99/doc2.png" class="" width="400"><h1 id="共用資料的方式"><a href="#共用資料的方式" class="headerlink" title="共用資料的方式"></a>共用資料的方式</h1><h2 id="UserDefaults-suiteName-App-Groups"><a href="#UserDefaults-suiteName-App-Groups" class="headerlink" title="UserDefaults + suiteName + App Groups"></a>UserDefaults + suiteName + App Groups</h2><ol><li><p>Project &gt; Signing &amp; Capabilites &gt; Add <code>App Groups</code> ( 請自定義一個 suiteName )</p> <img src="/pinkblog/2022/11/24/%E4%B8%8D%E5%90%8C-App-%E4%B9%8B%E9%96%93%E5%85%B1%E7%94%A8%E8%B3%87%E6%96%99/AppGroups.png" class=""></li><li><p>在需要存取資料的地方使用 UserDefaults 的 suiteName 寫法，suiteName = 上一步建立的 suiteName</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> groupUserDefaults <span class="operator">=</span> <span class="type">UserDefaults</span>.<span class="keyword">init</span>(suiteName: <span class="string">&quot;group.pink.company&quot;</span>)</span><br><span class="line">groupUserDefaults<span class="operator">?</span>.setValue(fcmToken, forKey: <span class="string">&quot;loginDataKey&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> groupUserDefaults<span class="operator">?</span>.value(forKey: <span class="string">&quot;loginDataKey&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Keychain-accessGroup-Keychain-Sharing"><a href="#Keychain-accessGroup-Keychain-Sharing" class="headerlink" title="Keychain + accessGroup + Keychain Sharing"></a>Keychain + accessGroup + Keychain Sharing</h2><ol><li><p>Project &gt; Signing &amp; Capabilites &gt; Add <code>Keychain Sharing</code> ( 請自定義一個 sharingName )</p> <img src="/pinkblog/2022/11/24/%E4%B8%8D%E5%90%8C-App-%E4%B9%8B%E9%96%93%E5%85%B1%E7%94%A8%E8%B3%87%E6%96%99/KeychainSharing.png" class=""></li><li><p>在需要存取資料的地方使用 Keychain 的 accessGroup 寫法，accessGroup = <code>你的 App 的 teamID</code>+<code>.</code>+<code>sharingName</code> </p><p> 原始寫法</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> accessGroup <span class="operator">=</span> <span class="string">&quot;&lt;# Your Team ID #&gt;.com.pink.sharing&quot;</span></span><br><span class="line"><span class="keyword">let</span> attributes <span class="operator">=</span> [kSecClass: kSecClassGenericPassword,</span><br><span class="line">                kSecAttrService: service,</span><br><span class="line">                kSecAttrAccount: username,</span><br><span class="line">                kSecAttrAccessGroup: accessGroup,</span><br><span class="line">                kSecValueData: password] <span class="keyword">as</span> [<span class="type">String</span>: <span class="keyword">Any</span>]</span><br><span class="line"><span class="keyword">let</span> addStatus <span class="operator">=</span> <span class="type">SecItemAdd</span>(attributes <span class="keyword">as</span> <span class="type">CFDictionary</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p> 但原始的 Keychain 寫法比較複雜，推薦使用三方 <a href="https://github.com/kishikawakatsumi/KeychainAccess">KeychainAccess</a> 來處理</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> KeychainAccess</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> accessGroup <span class="operator">=</span> <span class="string">&quot;&lt;# Your Team ID #&gt;.com.pink.sharing&quot;</span></span><br><span class="line"><span class="keyword">let</span> keychain <span class="operator">=</span> <span class="type">Keychain</span>(accessGroup: accessGroup)</span><br><span class="line">keychain[<span class="string">&quot;sharingDataKey&quot;</span>] <span class="operator">=</span> value</span><br><span class="line"><span class="keyword">let</span> keychainData <span class="operator">=</span> <span class="keyword">try?</span> keychain.get(<span class="string">&quot;sharingDataKey&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;不同 App 之間原本是無法溝通的，但是可運用一些技術來達到效果，運用場景像是同一間公司出的 App 可以互通登入狀態，或是 App 需要與 App Extension 共用資料等等。&lt;/p&gt;
&lt;/div&gt;

&lt;</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>製作 iOS Debug 小工具</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/11/22/%E8%A3%BD%E4%BD%9C-iOS-Debug-%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/11/22/%E8%A3%BD%E4%BD%9C-iOS-Debug-%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2022-11-21T16:00:00.000Z</published>
    <updated>2022-12-11T06:27:39.944Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>當開發 App 完成功能後，有時需要驗證產品流程正確性，或是尋找其他問題，除了 Console 的方式顯示訊息外，有沒有其他方式可以顯示一些偵錯訊息呢？也可以讓非開發者也能一同協助呢？</p></div><h1 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h1><ul><li>讓 <code>非開發者</code> 能夠協助驗證流程或是尋找問題<ul><li>驗證 <code>使用者行為的紀錄</code> (ex. Flurry、FirebaseEvent)</li><li>驗證 <code>Api呼叫的狀況</code> (ex. 呼叫次數、回應時長)</li></ul></li></ul><h1 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h1><p>因此我們需要一個隨時可以顯示在畫面上的元件，並且可顯示任何偵錯訊息！</p><p>這裡直接附上專案連結 <a href="https://github.com/pinkpika/DebugTool">DebugTool</a></p><ul><li>初始化方式 ( 宣告靜態的 DebugTool 並且顯示它 )</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> DebugTool</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SceneDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIWindowSceneDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> debugTool: <span class="type">DebugTool</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scene</span>(<span class="keyword">_</span> <span class="params">scene</span>: <span class="type">UIScene</span>, <span class="params">willConnectTo</span> <span class="params">session</span>: <span class="type">UISceneSession</span>, <span class="params">options</span> <span class="params">connectionOptions</span>: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> scene <span class="operator">=</span> (scene <span class="keyword">as?</span> <span class="type">UIWindowScene</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">#if</span> <span class="type">DEBUG</span></span><br><span class="line">        <span class="type">SceneDelegate</span>.debugTool <span class="operator">=</span> <span class="type">DebugTool</span>(windowScene: scene, point: <span class="type">CGPoint</span>(x: <span class="number">100</span>, y: <span class="number">100</span>))</span><br><span class="line">        <span class="type">SceneDelegate</span>.debugTool<span class="operator">?</span>.show()</span><br><span class="line">        <span class="keyword">#endif</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>依照觸發事件顯示訊息 ( 呼叫新增Toast )</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SceneDelegate</span>.debugTool<span class="operator">?</span>.addToast(<span class="string">&quot;客製化訊息: 123&quot;</span>)</span><br><span class="line"><span class="type">SceneDelegate</span>.debugTool<span class="operator">?</span>.addToast(<span class="string">&quot;客製化訊息: 123&quot;</span>, .custom(<span class="type">UIColor</span>.purple))</span><br><span class="line"><span class="type">SceneDelegate</span>.debugTool<span class="operator">?</span>.addToast(<span class="string">&quot;使用者訊息: 點擊了A按鈕&quot;</span>, .userEvent)</span><br><span class="line"><span class="type">SceneDelegate</span>.debugTool<span class="operator">?</span>.addToast(<span class="string">&quot;Api發送事件: 發送了OOXX的請求&quot;</span>, .apiSend)</span><br><span class="line"><span class="type">SceneDelegate</span>.debugTool<span class="operator">?</span>.addToast(<span class="string">&quot;Api花費時間: 花費了0000ms&quot;</span>, .apiTime)</span><br></pre></td></tr></table></figure><ul><li>點擊 Apple 可以打開設定畫面</li><li>長按 Apple 可以隱藏 Apple </li></ul><img src="/pinkblog/2022/11/22/%E8%A3%BD%E4%BD%9C-iOS-Debug-%E5%B0%8F%E5%B7%A5%E5%85%B7/demo.jpg" class=""><h1 id="應用到的技術"><a href="#應用到的技術" class="headerlink" title="應用到的技術"></a>應用到的技術</h1><ul><li>利用 UIWindow 建立一個漂浮的 Apple - <a href="https://github.com/pinkpika/DebugTool/blob/main/DebugTool/Classes/DebugTool.swift#L11">Link</a></li><li>利用 OptionSet 建立多選選項 - <a href="https://github.com/pinkpika/DebugTool/blob/main/DebugTool/Classes/DebugTypeOptions.swift#L11">Link</a></li><li>取得 UILabel 文字高度或是寬度 - <a href="https://github.com/pinkpika/DebugTool/blob/main/DebugTool/Classes/UILabel%2BgetLabelWidthHeight.swift#L10">Link</a></li><li>有 Padding 的 UILabel - <a href="https://github.com/pinkpika/DebugTool/blob/main/DebugTool/Classes/UIPaddingLabel.swift#L11">Link</a></li><li>利用 UIBezierPath 畫出彩色 Apple - <a href="https://github.com/pinkpika/DebugTool/blob/main/DebugTool/Classes/DebugImageView.swift#L11">Link</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;當開發 App 完成功能後，有時需要驗證產品流程正確性，或是尋找其他問題，除了 Console 的方式顯示訊息外，有沒有其他方式可以顯示一些偵錯訊息呢？也可以讓非開發者也能一同協助呢？&lt;/p&gt;
&lt;/div&gt;

&lt;</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitLab Runner 建立 CI 流程 - 下</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/11/14/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8B/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/11/14/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8B/</id>
    <published>2022-11-13T16:00:00.000Z</published>
    <updated>2022-12-11T06:27:39.941Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>建立 CI 流程除了需要建立 Runner 以外，另一部分就是需要設定好 CI 腳本，下面我們就根據 iOS 的專案來建立一個 CI 腳本，未來也可依照不同需求不同平台的專案，建立出專屬自己的腳本！</p></div><h1 id="基本設定"><a href="#基本設定" class="headerlink" title="基本設定"></a>基本設定</h1><ol><li><p>請先在 Repo 的根目錄下建立一個檔案，檔名為 <code>.gitlab-ci.yml</code>，並且打開後編輯它 </p> <img src="/pinkblog/2022/11/14/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8B/install1.jpg" class=""></li><li><p>首先要先設定有哪些 <code>stages</code> 狀態，這些狀態會對應在 pipeline 上的每個步驟，如下圖</p> <img src="/pinkblog/2022/11/14/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8B/install2.jpg" class=""><p> 這裡列出範例的狀態，請依照需求自行調整。</p><ul><li>start: 開始 CI 流程，可以執行通知 Slack 等等的腳本</li><li>lint: 跑靜態檢查器，可以跑 swiftlint 或 swiftformat</li><li>build: 編譯程式碼</li><li>unittest: 跑單元測試</li><li>archive: 可以在打 tag 時進行發版到 testflight ( 此處先略過，如果需要發版可呼叫 fastlane 的指令 )</li><li>tracing: 追蹤某些程式碼狀況或版號 </li><li>end: 結束 CI 流程</li></ul> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">start</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">lint</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">unittest</span></span><br><span class="line"><span class="comment"># - archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">tracing</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">end</span></span><br></pre></td></tr></table></figure></li><li><p>推薦定義 <code>before_script</code></p><p> 每一個 stage 都會先跑這段，可以顯示 MR 資訊、Runner 資訊、現在路徑等等，方便找出問題，此處的語法就會是 Shell Script，就是終端機常用的指令方式，可以上網找找使用方式。</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">MR</span> <span class="string">Commit</span> <span class="string">Ref</span> <span class="string">Name,</span> <span class="string">$CI_COMMIT_REF_SLUG</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">user</span> <span class="string">email,</span> <span class="string">$GITLAB_USER_EMAIL</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">Builder</span> <span class="string">DIR,</span> <span class="string">$CI_BUILDS_DIR</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">Project</span> <span class="string">Name,</span> <span class="string">$CI_PROJECT_NAME</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">Project</span> <span class="string">Url,</span> <span class="string">$CI_PROJECT_URL</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">Runner</span> <span class="string">ID,</span> <span class="string">$CI_RUNNER_ID</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">Runner</span> <span class="string">Description,</span> <span class="string">$CI_RUNNER_DESCRIPTION</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">pwd</span></span><br></pre></td></tr></table></figure></li><li><p>接下來就是一個一個 <code>stage</code> 來定義該做些什麼事</p><p> 先定義一個狀態名叫 start_stage，他對應的狀態是 start，他該做的事會寫在 script，然而通常通知 Slack 的腳本是可以共用的，所以可以呼叫某個位置的腳本來執行，並且在後面帶入想要傳達的訊息。</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">start_stage:</span> <span class="comment"># 狀態名，會顯示 pipeline 上</span></span><br><span class="line"><span class="attr">stage:</span> <span class="string">start</span> <span class="comment"># 對應的狀態是什麼？</span></span><br><span class="line"><span class="attr">script:</span> <span class="comment"># 該狀態會做些什麼？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span> <span class="string">~/NoticeSlackScript.sh</span> <span class="string">$CI_PROJECT_NAME</span> <span class="string">$CI_PROJECT_URL</span> <span class="string">$CI_RUNNER_ID</span> <span class="string">$CI_RUNNER_DESCRIPTION</span> <span class="string">$CI_COMMIT_REF_SLUG</span> <span class="string">$GITLAB_USER_EMAIL</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="額外設定"><a href="#額外設定" class="headerlink" title="額外設定"></a>額外設定</h1><ul><li>使用 <code>only</code> =&gt; 指定分支 <ul><li>如果只想要 master 上執行，可以用 only: master 來指定分支</li><li>或是想要有 tag 才執行，可以用 only: tag 來指定</li></ul></li><li>使用 <code>when</code> =&gt; 指定特定狀態<ul><li>基本上 lint、build、unittest 是依序執行的，但只要 lint 失敗，build、unittest 會跳過 skip，可以用 when: always 無論如何都會執行！</li><li>CI 的最後結果是成功或是失敗，可以用 when: on_success 和 when: on_failure 來定義！</li></ul></li></ul><img src="/pinkblog/2022/11/14/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8B/ex1.jpg" class=""><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tracing_stage:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">tracing</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">always</span> <span class="comment"># 不管前面 stage 是否失敗都會執行</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span> <span class="string">~/TracingScript.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">end_stage_success:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">end</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">on_success</span> <span class="comment"># CI 成功</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span> <span class="string">~/NoticeSlackSuccess.sh</span> <span class="string">$CI_PROJECT_NAME</span> <span class="string">$CI_PROJECT_URL</span> <span class="string">$CI_RUNNER_ID</span> <span class="string">$CI_RUNNER_DESCRIPTION</span> <span class="string">$CI_COMMIT_REF_SLUG</span> <span class="string">$GITLAB_USER_EMAIL</span></span><br><span class="line"></span><br><span class="line"><span class="attr">end_stage_failure:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">end</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">on_failure</span> <span class="comment"># CI 失敗 ( 流程中有發生編譯錯誤等等 )</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span> <span class="string">~/NoticeSlackFailure.sh</span> <span class="string">$CI_PROJECT_NAME</span> <span class="string">$CI_PROJECT_URL</span> <span class="string">$CI_RUNNER_ID</span> <span class="string">$CI_RUNNER_DESCRIPTION</span> <span class="string">$CI_COMMIT_REF_SLUG</span> <span class="string">$GITLAB_USER_EMAIL</span></span><br></pre></td></tr></table></figure><h1 id="完整範例"><a href="#完整範例" class="headerlink" title="完整範例"></a>完整範例</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stages: 定義有哪些狀態</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">start</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">unittest</span></span><br><span class="line">  <span class="comment"># - archive</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tracing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先行腳本: 下面每一個 stage 都會先跑這段</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">MR</span> <span class="string">Commit</span> <span class="string">Ref</span> <span class="string">Name,</span> <span class="string">$CI_COMMIT_REF_SLUG</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">user</span> <span class="string">email,</span> <span class="string">$GITLAB_USER_EMAIL</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">Builder</span> <span class="string">DIR,</span> <span class="string">$CI_BUILDS_DIR</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">Project</span> <span class="string">Name,</span> <span class="string">$CI_PROJECT_NAME</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">Project</span> <span class="string">Url,</span> <span class="string">$CI_PROJECT_URL</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">Runner</span> <span class="string">ID,</span> <span class="string">$CI_RUNNER_ID</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">Runner</span> <span class="string">Description,</span> <span class="string">$CI_RUNNER_DESCRIPTION</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="attr">start_stage:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">start</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span> <span class="string">~/NoticeSlackScript.sh</span> <span class="string">$CI_PROJECT_NAME</span> <span class="string">$CI_PROJECT_URL</span> <span class="string">$CI_RUNNER_ID</span> <span class="string">$CI_RUNNER_DESCRIPTION</span> <span class="string">$CI_COMMIT_REF_SLUG</span> <span class="string">$GITLAB_USER_EMAIL</span></span><br><span class="line"></span><br><span class="line"><span class="attr">lint_stage_lint:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">lint</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">swiftlint</span> <span class="string">lint</span> <span class="string">--config</span> <span class="string">.swiftlint.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">lint_stage_format:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">lint</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">swiftformat</span> <span class="string">--lint</span> <span class="string">.</span> <span class="string">--config</span> <span class="string">.swiftformat</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_stage:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">-list</span> <span class="string">-workspace</span> <span class="string">SampleApp.xcworkspace</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">clean</span> <span class="string">-workspace</span> <span class="string">SampleApp.xcworkspace</span> <span class="string">-scheme</span> <span class="string">SampleApp</span> <span class="string">|</span> <span class="string">xcpretty</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">build</span> <span class="string">-workspace</span> <span class="string">SampleApp.xcworkspace</span> <span class="string">-scheme</span> <span class="string">SampleApp</span> <span class="string">-destination</span> <span class="string">&#x27;platform=iOS Simulator,name=iPhone 8,OS=14.1&#x27;</span> <span class="string">|</span> <span class="string">xcpretty</span> <span class="string">-s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">unittest_stage:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">unittest</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">clean</span> <span class="string">-workspace</span> <span class="string">SampleApp.xcworkspace</span> <span class="string">-scheme</span> <span class="string">SampleApp</span> <span class="string">|</span> <span class="string">xcpretty</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xcodebuild</span> <span class="string">test</span> <span class="string">-workspace</span> <span class="string">SampleApp.xcworkspace</span> <span class="string">-scheme</span> <span class="string">SampleApp</span> <span class="string">-enableCodeCoverage</span> <span class="literal">YES</span> <span class="string">-destination</span> <span class="string">&#x27;platform=iOS Simulator,name=iPhone 8,OS=14.1&#x27;</span> <span class="string">|</span> <span class="string">xcpretty</span> <span class="string">-s</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">slather</span> <span class="string">coverage</span> <span class="string">--scheme</span> <span class="string">SampleApp</span> <span class="string">--workspace</span> <span class="string">SampleApp.xcworkspace</span> <span class="string">SampleApp.xcodeproj</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tracing_stage:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">tracing</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span> <span class="string">~/TracingScript.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">end_stage_success:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">end</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">on_success</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span> <span class="string">~/NoticeSlackSuccess.sh</span> <span class="string">$CI_PROJECT_NAME</span> <span class="string">$CI_PROJECT_URL</span> <span class="string">$CI_RUNNER_ID</span> <span class="string">$CI_RUNNER_DESCRIPTION</span> <span class="string">$CI_COMMIT_REF_SLUG</span> <span class="string">$GITLAB_USER_EMAIL</span></span><br><span class="line"></span><br><span class="line"><span class="attr">end_stage_failure:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">end</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">on_failure</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span> <span class="string">~/NoticeSlackFailure.sh</span> <span class="string">$CI_PROJECT_NAME</span> <span class="string">$CI_PROJECT_URL</span> <span class="string">$CI_RUNNER_ID</span> <span class="string">$CI_RUNNER_DESCRIPTION</span> <span class="string">$CI_COMMIT_REF_SLUG</span> <span class="string">$GITLAB_USER_EMAIL</span></span><br></pre></td></tr></table></figure><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>.gitlab-ci.yml 的設定方式有千變萬化，同時請注意 gitlab 或 runner 的版本是否支援到你寫的腳本，更多東西可以去 <a href="https://docs.gitlab.com/ee/ci/yaml/gitlab_ci_yaml.html">gitlab_ci_yaml</a> 官方網站去尋找。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;建立 CI 流程除了需要建立 Runner 以外，另一部分就是需要設定好 CI 腳本，下面我們就根據 iOS 的專案來建立一個 CI 腳本，未來也可依照不同需求不同平台的專案，建立出專屬自己的腳本！&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
    <category term="CICD" scheme="http://pinkpika.github.io/pinkblog/tags/CICD/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitLab Runner 建立 CI 流程 - 上</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/11/11/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8A/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/11/11/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8A/</id>
    <published>2022-11-10T16:00:00.000Z</published>
    <updated>2022-12-11T06:27:39.896Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>CI/CD 一直一來都是前端和後端共同的話題，因為自動化流程不管是應用在哪個領域用途都是相當大的，會節省相當多的時間和人力，如果結合軟體開發流程，甚至衍生出 DevOps 等等規範，而本篇則是用 GitLab Runner 建立一套 CI 流程。</p></div><h1 id="工具選擇"><a href="#工具選擇" class="headerlink" title="工具選擇"></a>工具選擇</h1><p>在選擇工具前，還是先知道我們要做什麼？所以說明一下什麼是 CI/CD</p><ul><li>CI: Continuous integration 持續集成，程式碼上傳後會自動編譯和測試和靜態檢查等等</li><li>CD: Continuous delivery 持續交付，CI 確認成功後自動發佈到正式環境</li></ul><p>網路上有太多優秀介紹 CI/CD 的文章，這裡只留 GitHub 和 GitLab 的官方解釋</p><ul><li><a href="https://resources.github.com/ci-cd/">GitHub - CI/CD explained</a></li><li><a href="https://about.gitlab.com/topics/ci-cd/">GitLab - What is CI/CD?</a></li></ul><p>想要為你的產品做一套 CI 流程，考慮因素很多，例如你的程式碼放哪裡？你的產品是網站、App還是服務？專案數量？共同的開發人員數量？金錢預算？<br>因此其實沒有最佳解，找到適合自己公司或產品才是重要的。<br>網路上也有相當多的線上服務，例如：Bitrise、TravisCI、CircleCI…</p><p>由於這次程式碼的部分是在”自架的 GitLab”上<br>因此選擇”GitLab Runner”做為搭配<br>( 如果用公開的 GitLab 實作 CICD 流程，步驟是差不多的 )</p><img src="/pinkblog/2022/11/11/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8A/intro.jpg" class=""><h1 id="安裝-CICD-流程"><a href="#安裝-CICD-流程" class="headerlink" title="安裝 CICD 流程"></a>安裝 CICD 流程</h1><ol><li>找到你的 GitLab Repo &gt; Setting &gt; CI/CD &gt; Runners</li><li>找到 Registration URL 和 Registration token</li></ol><img src="/pinkblog/2022/11/11/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8A/install1.jpg" class=""><img src="/pinkblog/2022/11/11/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8A/install2.jpg" class=""><ol start="3"><li>有一台實體或虛擬的 CI 機</li><li>CI 機執行以下步驟建立 Runner ( 這裡 CI 機是用 macOS 系統 )<ol><li>註冊 runner: <code>gitlab-runner register</code></li><li>輸入 GitLab 的網址</li><li>輸入 Token</li><li>輸入 Description</li></ol></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">http://ooo.ooo.ooo/ci</span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner</span><br><span class="line">vsdvsdvsd_sefefqb_u</span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner</span><br><span class="line">[hostname] new-runner</span><br></pre></td></tr></table></figure><ol start="5"><li>操作指令啟動或關閉 runner</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#啟動所有runner</span></span><br><span class="line">gitlab-runner list</span><br><span class="line"><span class="comment">#啟動所有runner</span></span><br><span class="line">gitlab-runner run</span><br><span class="line"><span class="comment">#把所有 process 移除，再重啟 runner (非必要不要使用，通常用在runner卡住或環境變數有異動)</span></span><br><span class="line">killall gitlab-runner -9 &amp;&amp; gitlab-runner run</span><br><span class="line"><span class="comment">#顯示Config</span></span><br><span class="line"><span class="built_in">cd</span> ~/.gitlab-runner/</span><br><span class="line">ls</span><br><span class="line">cat config.toml</span><br></pre></td></tr></table></figure><ol start="6"><li>回到 GitLab Repo &gt; Setting &gt; CI/CD &gt; Runners 就可以設定開啟連動指定 Runner</li></ol><img src="/pinkblog/2022/11/11/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8A/install3.jpg" class=""><ol start="7"><li>Repo 也需要新增 <code>.gitlab-ci.yml</code> 就會開始運作，下一篇文章會說明一下 CI 腳本並且提供範例</li></ol><img src="/pinkblog/2022/11/11/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8A/install4.jpg" class=""><ol start="8"><li>程式碼上傳就會開始跑 CI 了，可以在 CI/CD &gt; Pipelines 看結果</li></ol><img src="/pinkblog/2022/11/11/%E4%BD%BF%E7%94%A8-GitLab-Runner-%E5%BB%BA%E7%AB%8B-CI-%E6%B5%81%E7%A8%8B-%E4%B8%8A/install5.jpg" class=""><h1 id="CI-機推薦調整事項"><a href="#CI-機推薦調整事項" class="headerlink" title="CI 機推薦調整事項"></a>CI 機推薦調整事項</h1><ol><li>設定Mac的共享連線 =&gt; 隨時可以遠端回 CI 機做調整！<ul><li>終端機連線 <code>ssh user@192.168.000.000</code></li><li>Safari 連線 <code>vnc://192.168.000.000</code></li></ul></li><li>固定IP設定 =&gt; IP 不亂跳！</li><li>避免CI機睡眠<ul><li>前往 系統偏好設定 =&gt; 能源節約器</li><li>勾選「避免電腦在顯示器關閉時自動進入睡眠」</li></ul></li></ol><h1 id="CI-機-iOS-環境設定-選用"><a href="#CI-機-iOS-環境設定-選用" class="headerlink" title="CI 機 iOS 環境設定 ( 選用 )"></a>CI 機 iOS 環境設定 ( 選用 )</h1><ol><li>安裝 Xcode，可使用 Xcodes 下載</li><li>安裝 xcpretty</li><li>安裝 slather</li><li>安裝 cocoapods</li></ol><h1 id="其他可能問題"><a href="#其他可能問題" class="headerlink" title="其他可能問題"></a>其他可能問題</h1><ol><li><p>設定環境語言(解決:invalid byte sequence in US-ASCII (ArgumentError))</p><ul><li>輸入指令編輯 bashrc or bash_profile(不一定…似乎跟終端機環境設定有關)，不確定的話可以都設定</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi ~/.bashrc</span><br><span class="line">sudo vi ~/.bash_profile</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANGUAGE=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;CI/CD 一直一來都是前端和後端共同的話題，因為自動化流程不管是應用在哪個領域用途都是相當大的，會節省相當多的時間和人力，如果結合軟體開發流程，甚至衍生出 DevOps 等等規範，而本篇則是用 GitLab R</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
    <category term="CICD" scheme="http://pinkpika.github.io/pinkblog/tags/CICD/"/>
    
  </entry>
  
  <entry>
    <title>Mirror+PropertyWrapper</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/11/08/Mirror-PropertyWrapper/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/11/08/Mirror-PropertyWrapper/</id>
    <published>2022-11-07T16:00:00.000Z</published>
    <updated>2023-06-04T13:17:36.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="問題情境"><a href="#問題情境" class="headerlink" title="問題情境"></a>問題情境</h2><blockquote><p>如何產生一個 Struct 所對應資料的 Schema 呢？</p></blockquote><p>一開始我們有個資料結構如下，有包含<code>名稱、年紀、標籤清單、網站資訊、訊息列表</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;pink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&quot;tags&quot;</span>: [<span class="string">&quot;iOS&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Swift&quot;</span>],</span><br><span class="line">    <span class="string">&quot;webInfo&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;pinkpika github&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/pinkpika&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;posts&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;time&quot;</span>: <span class="number">1671321786</span>,</span><br><span class="line">            <span class="string">&quot;text&quot;</span>: <span class="string">&quot;今天是個好天氣。&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;time&quot;</span>: <span class="number">1671436986</span>,</span><br><span class="line">            <span class="string">&quot;text&quot;</span>: <span class="string">&quot;吃到一間好吃的蛋糕店！&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以很直覺地建立一個叫 Member 的 Struct，並且 conform Codable 方便解析該 json 資料。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Member</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> tags: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">let</span> webInfo: <span class="type">WebInfo</span></span><br><span class="line">    <span class="keyword">let</span> posts: [<span class="type">Post</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WebInfo</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> url: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Post</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> time: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> text: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此時我們不僅需要解析上面的 json，同時我們也想要<code>自動產生該資料的 Schema</code>，如同下面的格式。</p><ul><li>key: 欄位名稱</li><li>des: 中文敘述 ( 需要給 Server 類似註解的東西 )</li><li>type: 資料類型 ( 有 string、number、object、arrayObject、arrayNumber、arrayString )</li><li>object: 物件定義 ( 資料類型 = object 或是 arrayObject 才有 )</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;des&quot;</span>: <span class="string">&quot;姓名&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;age&quot;</span>,</span><br><span class="line">    <span class="string">&quot;des&quot;</span>: <span class="string">&quot;年紀&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;tags&quot;</span>,</span><br><span class="line">    <span class="string">&quot;des&quot;</span>: <span class="string">&quot;標籤清單&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;arrayString&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;webInfo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;des&quot;</span>: <span class="string">&quot;網站訊息&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span></span><br><span class="line">    <span class="string">&quot;object&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">        <span class="string">&quot;des&quot;</span>: <span class="string">&quot;標題&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;url&quot;</span>,</span><br><span class="line">        <span class="string">&quot;des&quot;</span>: <span class="string">&quot;網址&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;des&quot;</span>: <span class="string">&quot;訊息列表&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;arrayObject&quot;</span>,</span><br><span class="line">    <span class="string">&quot;object&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;time&quot;</span>,</span><br><span class="line">        <span class="string">&quot;des&quot;</span>: <span class="string">&quot;時間&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;des&quot;</span>: <span class="string">&quot;文字&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h2 id="解法討論"><a href="#解法討論" class="headerlink" title="解法討論"></a>解法討論</h2><h3 id="使用-Mirror-PropertyWrapper-的組合技"><a href="#使用-Mirror-PropertyWrapper-的組合技" class="headerlink" title="使用 Mirror + PropertyWrapper 的組合技"></a>使用 Mirror + PropertyWrapper 的組合技</h3><div class="note info flat"><p>想法提示:</p><ol><li>自動產生 Schema 可使用 <code>Mirror</code></li><li>資料 Schema 的注解可使用 <code>PropertyWrapper</code></li></ol></div><p>先定義一個 DataSchema，它包含 key、des、type、object，所有 Schema 需要的資料。</p><p>再定義一個 protocol 叫做 DataModel，並且實作一個 getDataSchema 的功能，內部使用 Mirror 反射出屬性的”名稱”和”類型”，然後依照不同的屬性類型轉換成不同的 DataSchema。</p><p>如果該屬性不是原生類型，而是自定義物件，則需要使用 <code>genericType as? DataModel.Type</code> 轉換成 DataModel，並使用遞迴的方式呼叫 getDataSchema 取得內部屬性。</p><p>如果是自定義物件的陣列，則需要使用 <code>let collectionType = genericType as? any CollectionProtocol.Type</code> 和 <code>collectionType.getElementType()</code> 取出藏在陣列裡的元素，然後一樣呼叫  getDataSchema 取得內部屬性。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DataSchema</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ParaType</span>: <span class="title">String</span>, <span class="title">Codable</span></span>&#123;</span><br><span class="line">        <span class="keyword">case</span> string</span><br><span class="line">        <span class="keyword">case</span> number</span><br><span class="line">        <span class="keyword">case</span> object</span><br><span class="line">        <span class="keyword">case</span> arrayObject</span><br><span class="line">        <span class="keyword">case</span> arrayNumber</span><br><span class="line">        <span class="keyword">case</span> arrayString</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> key: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> des: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> type: <span class="type">ParaType</span></span><br><span class="line">    <span class="keyword">let</span> object: [<span class="type">DataSchema</span>]<span class="operator">?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DataModel</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">init</span>()</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getDataSchema</span>()</span> -&gt; [<span class="type">DataSchema</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DataModel</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getDataSchema</span>()</span> -&gt; [<span class="type">DataSchema</span>]&#123;</span><br><span class="line">        <span class="keyword">var</span> output: [<span class="type">DataSchema</span>] <span class="operator">=</span> []</span><br><span class="line">        <span class="keyword">let</span> mirror <span class="operator">=</span> <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label<span class="operator">?</span>, value) <span class="keyword">in</span> mirror.children &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> generic <span class="operator">=</span> value <span class="keyword">as?</span> any <span class="type">GenericReflectable</span> <span class="keyword">else</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> genericType <span class="operator">=</span> generic.getRealValueType().<span class="keyword">self</span></span><br><span class="line">            <span class="keyword">let</span> key <span class="operator">=</span> getFixName(label)</span><br><span class="line">            <span class="keyword">let</span> des <span class="operator">=</span> generic.getDescription()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> genericType <span class="keyword">is</span> <span class="type">Int</span>.<span class="keyword">Type</span> <span class="operator">||</span> genericType <span class="keyword">is</span> <span class="type">Double</span>.<span class="keyword">Type</span> &#123;</span><br><span class="line">                output.append(<span class="type">DataSchema</span>(key: key, des: des, type: .number, object: <span class="literal">nil</span>))</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> genericType <span class="keyword">is</span> <span class="type">String</span>.<span class="keyword">Type</span> &#123;</span><br><span class="line">                output.append(<span class="type">DataSchema</span>(key: key, des: des, type: .string, object: <span class="literal">nil</span>))</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> genericType <span class="keyword">is</span> [<span class="type">Int</span>].<span class="keyword">Type</span> <span class="operator">||</span> genericType <span class="keyword">is</span> [<span class="type">Double</span>].<span class="keyword">Type</span> &#123;</span><br><span class="line">                output.append(<span class="type">DataSchema</span>(key: key, des: des, type: .arrayNumber, object: <span class="literal">nil</span>))</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> genericType <span class="keyword">is</span> [<span class="type">String</span>].<span class="keyword">Type</span> &#123;</span><br><span class="line">                output.append(<span class="type">DataSchema</span>(key: key, des: des, type: .arrayString, object: <span class="literal">nil</span>))</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> configModelType <span class="operator">=</span> genericType <span class="keyword">as?</span> <span class="type">DataModel</span>.<span class="keyword">Type</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> object <span class="operator">=</span> configModelType.<span class="keyword">init</span>().getDataSchema()</span><br><span class="line">                output.append(<span class="type">DataSchema</span>(key: key, des: des, type: .object, object: object))</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> collectionType <span class="operator">=</span> genericType <span class="keyword">as?</span> any <span class="type">CollectionProtocol</span>.<span class="keyword">Type</span> ,</span><br><span class="line">                <span class="keyword">let</span> configModelType <span class="operator">=</span> collectionType.getElementType().<span class="keyword">self</span> <span class="keyword">as?</span> <span class="type">DataModel</span>.<span class="keyword">Type</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> object <span class="operator">=</span> configModelType.<span class="keyword">init</span>().getDataSchema()</span><br><span class="line">                output.append(<span class="type">DataSchema</span>(key: key, des: des, type: .arrayObject, object: object))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getFixName</span>(<span class="keyword">_</span> <span class="params">name</span>: <span class="type">String</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name.replacingOccurrences(of: <span class="string">&quot;_&quot;</span>, with: <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Member</span>: <span class="title">Codable</span>, <span class="title">DataModel</span></span>&#123;</span><br><span class="line">    <span class="meta">@DataProperty</span>(description: <span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">    <span class="meta">@DataProperty</span>(description: <span class="string">&quot;年紀&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span>?</span><br><span class="line">    <span class="meta">@DataProperty</span>(description: <span class="string">&quot;標籤清單&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> tags: [<span class="type">String</span>]<span class="operator">?</span></span><br><span class="line">    <span class="meta">@DataProperty</span>(description: <span class="string">&quot;網站訊息&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> webInfo: <span class="type">WebInfo</span>?</span><br><span class="line">    <span class="meta">@DataProperty</span>(description: <span class="string">&quot;訊息列表&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> posts: [<span class="type">Post</span>]<span class="operator">?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WebInfo</span>: <span class="title">Codable</span>, <span class="title">DataModel</span></span>&#123;</span><br><span class="line">    <span class="meta">@DataProperty</span>(description: <span class="string">&quot;標題&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span>?</span><br><span class="line">    <span class="meta">@DataProperty</span>(description: <span class="string">&quot;網址&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> url: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Post</span>: <span class="title">Codable</span>, <span class="title">DataModel</span></span>&#123;</span><br><span class="line">    <span class="meta">@DataProperty</span>(description: <span class="string">&quot;時間&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> time: <span class="type">Double</span>?</span><br><span class="line">    <span class="meta">@DataProperty</span>(description: <span class="string">&quot;文字&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> text: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>遇到問題:</p><ol><li>中間有遇到泛型 propertyWrapper 無法取得原始類型的問題 =&gt; 實作 GenericReflectable 來解決</li><li>中間有遇到 Array 無法取得 Element 的問題 =&gt; 實作 CollectionProtocol 來解決</li><li>中間有遇到 DataProperty Codable 需要改寫的問題，只要數值無需註解 =&gt; 實作 Codable decoder 來解決</li><li>中間有遇到 DataProperty 可能為 nil 的問題 =&gt; 實作 KeyedDecodingContainer 來解決</li></ol></div><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 泛型反射出需要的資料</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">GenericReflectable</span></span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">RealValueType</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getDescription</span>()</span> -&gt; <span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getRealValueType</span>()</span> -&gt; <span class="type">RealValueType</span>.<span class="keyword">Type</span><span class="operator">?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// DataProperty ( DataModel 的欄位 )</span></span><br><span class="line"><span class="keyword">@propertyWrapper</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DataProperty</span>&lt;<span class="title">T</span>: <span class="title">Codable</span>&gt;: <span class="title">Codable</span>, <span class="title">GenericReflectable</span></span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">RealValueType</span> <span class="operator">=</span> <span class="type">T</span></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">T</span>?</span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">from</span> <span class="params">decoder</span>: <span class="type">Decoder</span>)</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> container <span class="operator">=</span> <span class="keyword">try</span> decoder.singleValueContainer()</span><br><span class="line">        wrappedValue <span class="operator">=</span> <span class="keyword">try?</span> container.decode(<span class="type">T</span>.<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">encode</span>(<span class="params">to</span> <span class="params">encoder</span>: <span class="type">Encoder</span>)</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> container <span class="operator">=</span> encoder.singleValueContainer()</span><br><span class="line">        <span class="keyword">try</span> container.encode(wrappedValue)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">description</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.description <span class="operator">=</span> description</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">wrappedValue</span>: <span class="type">T</span>?)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.wrappedValue <span class="operator">=</span> wrappedValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getDescription</span>()</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getRealValueType</span>()</span> -&gt; <span class="type">RealValueType</span>.<span class="keyword">Type</span><span class="operator">?</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">T</span>.<span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">KeyedDecodingContainer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">decode</span>&lt;<span class="type">T</span>: <span class="type">Codable</span>&gt;(<span class="keyword">_</span> <span class="params">type</span>: <span class="type">DataProperty</span>&lt;<span class="type">T</span>&gt;.<span class="keyword">Type</span>, <span class="params">forKey</span> <span class="params">key</span>: <span class="type">Key</span>)</span> <span class="keyword">throws</span> -&gt; <span class="type">DataProperty</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> decodeIfPresent(type, forKey: key) <span class="operator">??</span> .<span class="keyword">init</span>(wrappedValue: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CollectionProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">getElementType</span>()</span> -&gt; <span class="keyword">Any</span>.<span class="keyword">Type</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span>: <span class="title">CollectionProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">getElementType</span>()</span> -&gt; <span class="keyword">Any</span>.<span class="keyword">Type</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Element</span>.<span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="結果測試"><a href="#結果測試" class="headerlink" title="結果測試"></a>結果測試</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🟢 DataSchema =============================================&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> dataSchema <span class="operator">=</span> <span class="type">Member</span>().getDataSchema()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONEncoder</span>().encode(dataSchema) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;output:&quot;</span>, <span class="type">String</span>(decoding: data, as: <span class="type">UTF8</span>.<span class="keyword">self</span>)) <span class="comment">// &lt;----- 正確顯示 DataSchema</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🟢 DataSchema Decoder =============================================&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> jsonString <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;pink&quot;,</span></span><br><span class="line"><span class="string">    &quot;age&quot;: 18,</span></span><br><span class="line"><span class="string">    &quot;tags&quot;: [&quot;iOS&quot;, &quot;Apple&quot;, &quot;Swift&quot;],</span></span><br><span class="line"><span class="string">    &quot;webInfo&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;title&quot;: &quot;pinkpika github&quot;,</span></span><br><span class="line"><span class="string">        &quot;url&quot;: &quot;https://github.com/pinkpika&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;posts&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;time&quot;: 1671321786,</span></span><br><span class="line"><span class="string">            &quot;text&quot;: &quot;今天是個好天氣。&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;time&quot;: 1671436986,</span></span><br><span class="line"><span class="string">            &quot;text&quot;: &quot;吃到一間好吃的蛋糕店！&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> jsonData <span class="operator">=</span> <span class="type">Data</span>(jsonString.utf8)</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> model <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">Member</span>.<span class="keyword">self</span>, from: jsonData)  <span class="comment">// &lt;----- 正確解析 Json 物件</span></span><br><span class="line">    <span class="built_in">print</span>(model.name)</span><br><span class="line">    <span class="built_in">print</span>(model.age)</span><br><span class="line">    <span class="built_in">print</span>(model.tags)</span><br><span class="line">    <span class="built_in">print</span>(model.webInfo)</span><br><span class="line">    <span class="built_in">print</span>(model.posts)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;問題情境&quot;&gt;&lt;a href=&quot;#問題情境&quot; class=&quot;headerlink&quot; title=&quot;問題情境&quot;&gt;&lt;/a&gt;問題情境&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;如何產生一個 Struct 所對應資料的 Schema 呢？&lt;/p&gt;
&lt;/blockquote</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
    <category term="Swift" scheme="http://pinkpika.github.io/pinkblog/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Refactoring Enums 重構列舉</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/11/07/Refactoring-Enums-%E9%87%8D%E6%A7%8B%E5%88%97%E8%88%89/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/11/07/Refactoring-Enums-%E9%87%8D%E6%A7%8B%E5%88%97%E8%88%89/</id>
    <published>2022-11-06T16:00:00.000Z</published>
    <updated>2022-12-11T06:27:39.889Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子接收到很有趣的程式碼，基本上就是一個很大的 enum 有多達 30 個以上的 case，還有一個 4000 行 Factory 類別，Factory 裡面都是依照 enum 做各種處理，當初這類別相當複雜，有些處理會呼叫 Api、有些讀取 DB、每個 case 的步驟也都不相同，但通通都在這個類別處理，導致程式碼快 4000 行。</p><p>下面先簡化成三個 case 的 enum</p><figure class="highlight swift"><figcaption><span>CakeType.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CakeType</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> strawberryCake</span><br><span class="line">    <span class="keyword">case</span> cheeseCake</span><br><span class="line">    <span class="keyword">case</span> chocolateCake</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><figcaption><span>CakeFactory.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CakeFactory</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 取得價格</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getPrice</span>(<span class="params">cakeType</span>: <span class="type">CakeType</span>)</span> -&gt; <span class="type">Double</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> cakeType&#123;</span><br><span class="line">        <span class="keyword">case</span> .strawberryCake: <span class="keyword">return</span> <span class="number">100.0</span></span><br><span class="line">        <span class="keyword">case</span> .cheeseCake: <span class="keyword">return</span> <span class="number">85.0</span></span><br><span class="line">        <span class="keyword">case</span> .chocolateCake: <span class="keyword">return</span> <span class="number">120.0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 取得成分資料</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getIngredientData</span>(<span class="params">cakeType</span>: <span class="type">CakeType</span>)</span> -&gt; <span class="type">IngredientData</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> cakeType&#123;</span><br><span class="line">        <span class="keyword">case</span> .strawberryCake: <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">case</span> .cheeseCake: <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">case</span> .chocolateCake: <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其實可以做一個簡單的重構，聽過一種說法是”所有 switch case 都可以用設計模式來取代！”，<br>所以只要看到有大量 switch case 的判斷，都可以想想有沒有其他解決方式。<br>對我來說使用 switch case 有三個小缺點</p><ol><li>無法讓權責分明，行數很多，此方法或類別處理兩條以上的流程 ( ex. A 流程, B 流程 …. )</li><li>未來新增 case 時，只要有用到 switch case 就要每個地方都去修正 ( ex. 新增 C 流程 )</li><li>如果想要抽換 A 流程作法，是很難做到的 ( ex. A 流程改成 A-1 流程或是 A-2 流程 )</li></ol><p>重構總共需要三步驟：</p><ol><li><p>抽象化你的 enum case</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Cake</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getIngredientData</span>()</span> -&gt; <span class="type">IngredientData</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>實作多個 Cake</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StrawberryCake</span>: <span class="title">Cake</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getIngredientData</span>()</span> -&gt; <span class="type">IngredientData</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">IngredientData</span>() <span class="comment">// ... 很多步驟省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CheeseCake</span>: <span class="title">Cake</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">85.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getIngredientData</span>()</span> -&gt; <span class="type">IngredientData</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">IngredientData</span>() <span class="comment">// ... 很多步驟省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ChocolateCake</span>: <span class="title">Cake</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">120.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getIngredientData</span>()</span> -&gt; <span class="type">IngredientData</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">IngredientData</span>() <span class="comment">// ... 很多步驟省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 enum，方便可以使用它取得 Cake 的實作，必要時也可以動態修改 Cake 的實作</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CakeType</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> strawberryCake</span><br><span class="line">    <span class="keyword">case</span> cheeseCake</span><br><span class="line">    <span class="keyword">case</span> chocolateCake</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> allCake: [<span class="type">CakeType</span>: <span class="type">Cake</span>] <span class="operator">=</span> [</span><br><span class="line">        .strawberryCake: <span class="type">StrawberryCake</span>(),</span><br><span class="line">        .cheeseCake: <span class="type">CheeseCake</span>(),</span><br><span class="line">        .chocolateCake: <span class="type">ChocolateCake</span>()</span><br><span class="line">    ]</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getCake</span>()</span> -&gt; <span class="type">Cake</span>?&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CakeType</span>.allCake[<span class="keyword">self</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>使用方式：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="type">CakeType</span>.strawberryCake.getCake()<span class="operator">?</span>.price)</span><br></pre></td></tr></table></figure><p>結論來講，這種作法已經可以將 30 個以上的 case，分散到 30 個物件(檔案)去實作，找起 Bug 來方便許多；<br>如果要新增 case 也不用在每個 switch case 補上去，因為已經沒有任何 switch case 了，這種抽象化的做法是非常常見的。<br>但是當然不是所有狀況都需要加上抽象化，這可能會變成 Over Design，需要對專案和需求做進一步的評估才對。</p><hr><p>延伸想法:</p><p>之前做過另一種重構 enum case 的方式是使用 static 屬性！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cake</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> strawberryCake <span class="operator">=</span> <span class="type">Cake</span>(price: <span class="number">100.0</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> cheeseCake <span class="operator">=</span> <span class="type">Cake</span>(price: <span class="number">85.0</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> chocolateCake <span class="operator">=</span> <span class="type">Cake</span>(price: <span class="number">120.0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="type">Cake</span>.strawberryCake.price)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前陣子接收到很有趣的程式碼，基本上就是一個很大的 enum 有多達 30 個以上的 case，還有一個 4000 行 Factory 類別，Factory 裡面都是依照 enum 做各種處理，當初這類別相當複雜，有些處理會呼叫 Api、有些讀取 DB、每個 case 的步驟</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
    <category term="Swift" scheme="http://pinkpika.github.io/pinkblog/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>ssh public key fingerprints 衝突案例</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/06/22/ssh-public-key-fingerprints-%E8%A1%9D%E7%AA%81%E6%A1%88%E4%BE%8B/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/06/22/ssh-public-key-fingerprints-%E8%A1%9D%E7%AA%81%E6%A1%88%E4%BE%8B/</id>
    <published>2022-06-22T09:13:18.000Z</published>
    <updated>2022-08-14T09:25:06.218Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>近期在開發過程中 ssh 連線時驗證公鑰指紋 ( public key fingerprints )，發生過兩次的衝突案例，希望在此記錄下來，以便未來回顧之用。</p></div><h1 id="衝突案例"><a href="#衝突案例" class="headerlink" title="衝突案例"></a>衝突案例</h1><p>ssh 連線常用於 git 操作或是遠端連線伺服器，身份驗證可以使用”公鑰私鑰交換”或是”用戶帳密”來進行身份驗證，正好下面提到的兩個案例各有一個。</p><ul><li>案例1:<ul><li>某天晚上公司 MIS 幫大家換內部自建的私有 GitLab 機台，當然換的過程有完整備份，最後連線的 ip 也是相同沒有更換，但隔天大家要使用 git ssh 的方式發動遠端操作，例如 push pull …，結果失敗 🤯</li></ul></li><li>案例2:<ul><li>某天我將公司 CI 機進行更換，換成另一台硬體性能比較好的機器，一樣有做完整轉移和設定，但最後我使用終端機發動遠端連線 <code>ssh user@192.168.ooo.xxx</code>，結果失敗 🤯</li></ul></li></ul><img src="/pinkblog/2022/06/22/ssh-public-key-fingerprints-%E8%A1%9D%E7%AA%81%E6%A1%88%E4%BE%8B/0.png" class="" width="400"><h1 id="問題原因"><a href="#問題原因" class="headerlink" title="問題原因"></a>問題原因</h1><p>進行 ssh 連線有一個漏洞需要進行防範，就是中間人攻擊 ( <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attack</a> )，可以用惡意的攔截封包軟體，並且在發送資料前後進行解密和重新加密，為了保護 ssh 連線，因此在第一次連線會建立 fingerprints，下次連線時會檢查它跟這次連線是否吻合，而它就儲存在 <code>~/.ssh/known_hosts</code>。</p><p>想當然案例 1 或是案例 2 發生時 fingerprints 都會發生驗證錯誤，<strong>主機更換但 ip 不變</strong> 就像是仿照了一台假機器進行攻擊一樣，不過我們自己知道目前的機器是對的。</p><p>參考來源: <a href="https://www.phcomp.co.uk/Tutorials/Unix-And-Linux/ssh-check-server-fingerprint.html">Checking ssh public key fingerprints</a></p><h1 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h1><p>解法就是編輯 known_hosts，移除指定的連線 fingerprint 即可！<br>可以直接打開文件編輯，也可用下列指令！</p><ul><li><p>查看目前的 known_hosts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure></li><li><p>移除特定 fingerprints</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -R 192.168.ooo.xxx</span><br><span class="line">ssh-keygen -R &quot;[192.168.ooo.xxx]:12345&quot;</span><br></pre></td></tr></table></figure></li></ul><img src="/pinkblog/2022/06/22/ssh-public-key-fingerprints-%E8%A1%9D%E7%AA%81%E6%A1%88%E4%BE%8B/1.png" class="" width="600"><img src="/pinkblog/2022/06/22/ssh-public-key-fingerprints-%E8%A1%9D%E7%AA%81%E6%A1%88%E4%BE%8B/2.png" class="" width="600"><hr><p>題外話: 因為筆者平常開發 iOS 習慣用 Sourcetree，所以案例 1 在移除特定 fingerprints 後，還需要到終端機進行 git clone 任一專案讓 fingerprints 重新設定完成，不然 Sourcetree 傻傻地會有奇怪的錯誤。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;近期在開發過程中 ssh 連線時驗證公鑰指紋 ( public key fingerprints )，發生過兩次的衝突案例，希望在此記錄下來，以便未來回顧之用。&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;衝突案例&quot;</summary>
      
    
    
    
    <category term="Other" scheme="http://pinkpika.github.io/pinkblog/categories/Other/"/>
    
    
    <category term="ssh" scheme="http://pinkpika.github.io/pinkblog/tags/ssh/"/>
    
  </entry>
  
</feed>
