<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pink Blog</title>
  <icon>https://www.gravatar.com/avatar/5c6581fa74d8841029b0c88328e88401</icon>
  <subtitle>Simplicity is the soul of efficiency.</subtitle>
  <link href="http://pinkpika.github.io/pinkblog/atom.xml" rel="self"/>
  
  <link href="http://pinkpika.github.io/pinkblog/"/>
  <updated>2022-03-15T17:16:08.288Z</updated>
  <id>http://pinkpika.github.io/pinkblog/</id>
  
  <author>
    <name>pinkpika</name>
    <email>tim801217@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SwiftUI 和 Combine 的第一次接觸</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/03/15/SwiftUI-%E5%92%8C-Combine-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%B8/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/03/15/SwiftUI-%E5%92%8C-Combine-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%B8/</id>
    <published>2022-03-15T09:44:01.000Z</published>
    <updated>2022-03-15T17:16:08.288Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>從 2019 年的 WWDC 發布 SwiftUI 和 Combine 至今過許久，但遲遲沒有開始學習和應用，最近想開始慢慢接觸它，這只是第一篇文章，未來會再持續記錄下去。</p></div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前開發 App 是基於 Objective-C 編寫程式的方式，加上 Cocoa Design Patterns 例如 target/action、delegate/protocol、KVO、NotificationCenter，並且使用 AppKit 和 UIKit 的 UI 系統和 MVC 的程式架構，而 Swift 基本上也是將上述用法原封不動地封裝成自己的接口，發展出更簡化更安全的呼叫方式，由於近代程式語言的演進和趨勢，同時前端各種語言和框架的興起 ( React Native 和 Flutter … )，Swift 也進而演化出 SwiftUI 和 Combine。</p><p>這邊要先提及另一個名詞叫做”程式範式”，一般來說”程式範式”（ <a href="https://en.wikipedia.org/wiki/Programming_paradigm">Programming Paradigm</a> ) 會直接影響寫程式的思考方式和邏輯，有些程式語言只為一種範式而設計、有些程式語言可以用多種範式去撰寫。</p><p>最簡單可以有兩種分類方式</p><ul><li>指令式程式設計 ( <a href="https://en.wikipedia.org/wiki/Imperative_programming">Imperative Programming</a> ):<ul><li>利用運算符號 + 循環執行 + 條件判斷，一行一指令，不斷地往下執行來達到目標的功能 =&gt; <strong>描述過程</strong></li><li>以義大利麵的案例來講，就像先滾水煮熟天使細麵、撈出麵條、與肉醬攪拌熱炒、放入盤中</li><li>也就是以前我們撰寫 OC 和 Swift 所使用的方式</li><li>其中還有更詳細的分類，例如 Procedural / Structured / Object-oriented programming …</li></ul></li><li>宣告式程式設計 ( <a href="https://en.wikipedia.org/wiki/Declarative_programming">Declarative Programming</a> ): <ul><li>利用宣告的方式，在初始化就定義好資料和 View 的狀態和未來的走向 =&gt; <strong>描述結果</strong></li><li>以義大利麵的案例來講，就像定義一個義大利肉醬天使細麵</li><li>一般使用”函數式程式設計”或是”領域特定語言 ( DSL/Domain-Specific Language , ex. HTML、SQL ) 來實作宣告式程式設計</li><li>SwiftUI 就是這種思考方式</li></ul></li></ul><p>Combine 是基於響應式程式設計 ( <a href="https://en.wikipedia.org/wiki/Reactive_programming">Reactive Programming</a> ) 來管理數據資料，也算是宣告式程式設計的其中一個分支。</p><p>因此在開發 SwiftUI 和 Combine 盡量要丟棄以往的思考方式，用全新的看法去開發會更容易理解。</p><hr><h1 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h1><p>這裡不詳細說明 SwiftUI 的用法，僅僅列出範例，未來再詳細整理。<br>值得一提的是 SwiftUI 的 <a href="https://developer.apple.com/documentation/swiftui/view">View</a> 是一個 Protocol，實做出來的 View 例如 VStack、Spacer、Button 也都是 struct，而且連 Color 都是 Conform View 的 struct。</p><img src="/pinkblog/2022/03/15/SwiftUI-%E5%92%8C-Combine-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%B8/1.png" class="" width="800"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CakeView</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Cake List&quot;</span>)</span><br><span class="line">                .font(.system(size: <span class="number">32</span>))</span><br><span class="line">                .foregroundColor(.gray)</span><br><span class="line">                .minimumScaleFactor(<span class="number">0.5</span>)</span><br><span class="line">                .padding(.trailing, <span class="number">24</span>)</span><br><span class="line">                .frame(</span><br><span class="line">                    minWidth: <span class="number">0</span>,</span><br><span class="line">                    maxWidth: .infinity,</span><br><span class="line">                    alignment: .trailing)</span><br><span class="line">            <span class="type">CakeButtonRow</span>(row: [.strawberry, .cocolate, .cheese])</span><br><span class="line">                .padding(.bottom)</span><br><span class="line">            <span class="type">CakeButtonRow</span>(row: [.cocolate, .cheese, .strawberry])</span><br><span class="line">                .padding(.bottom)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CakeView_Previews</span> : <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            <span class="type">CakeView</span>()</span><br><span class="line">            <span class="type">CakeView</span>().previewDevice(<span class="string">&quot;iPhone 13&quot;</span>)</span><br><span class="line">            <span class="type">CakeView</span>().previewDevice(<span class="string">&quot;iPad Air 2&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CakeButtonRow</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> row: [<span class="type">CakeItem</span>]</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">ForEach</span>(row, id: \.<span class="keyword">self</span>) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">CakeButton</span>(</span><br><span class="line">                    title: item.title,</span><br><span class="line">                    backgroundColor: item.backgroundColor)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Button: <span class="subst">\(item.title)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CakeButton</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> backgroundColor: <span class="type">Color</span></span><br><span class="line">    <span class="keyword">let</span> action: () -&gt; <span class="type">Void</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(action: action) &#123;</span><br><span class="line">            <span class="type">Text</span>(title)</span><br><span class="line">                .font(.system(size: <span class="number">16</span>))</span><br><span class="line">                .foregroundColor(.white)</span><br><span class="line">                .frame(width: <span class="number">120</span>, height: <span class="number">30</span>)</span><br><span class="line">                .background(backgroundColor)</span><br><span class="line">                .cornerRadius(<span class="number">30</span><span class="operator">/</span><span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CakeItem</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> strawberry</span><br><span class="line">    <span class="keyword">case</span> cocolate</span><br><span class="line">    <span class="keyword">case</span> cheese</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .strawberry: <span class="keyword">return</span> <span class="string">&quot;Strawberry&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .cocolate: <span class="keyword">return</span> <span class="string">&quot;Cocolate&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .cheese: <span class="keyword">return</span> <span class="string">&quot;Cheese&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> backgroundColor: <span class="type">Color</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .strawberry: <span class="keyword">return</span> .pink</span><br><span class="line">        <span class="keyword">case</span> .cocolate: <span class="keyword">return</span> .brown</span><br><span class="line">        <span class="keyword">case</span> .cheese: <span class="keyword">return</span> .yellow</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CakeItem</span>: <span class="title">Hashable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Combine"><a href="#Combine" class="headerlink" title="Combine"></a>Combine</h1><h2 id="單向數據流的-Redux"><a href="#單向數據流的-Redux" class="headerlink" title="單向數據流的 Redux"></a>單向數據流的 Redux</h2><p>在使用 Combine 之前，需要先理解一下<strong>單向數據流的 <a href="https://redux.js.org/">Redux</a></strong> 概念和 <a href="https://facebook.github.io/flux/">Flux</a>，其思想來源為 <a href="https://elm-lang.org/">Elm</a>，後來也影響其他前台的開發框架 React Component 和 Flutter。</p><img src="/pinkblog/2022/03/15/SwiftUI-%E5%92%8C-Combine-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%B8/redux.png" class="" width="300"><p>它需要以下東西驅動資料更動</p><ul><li>Store: 專門存放多個 State</li><li>State: 可視為狀態或是資料</li><li>Reducer: 可用於更新 State<ul><li>特性是純函數設計，此方法只會依照參數決定回傳值，不會依賴任何系統狀態，也不應改變任何全域資料，因此沒有任何依賴關係。</li></ul></li><li>Action: 用來驅動 Reducer</li><li>View: 不能直接操作 Status 而是利用 Action 發動改變 Store 中的 State</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Reducer</span> </span>&#123; </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">reduce</span>(<span class="params">state</span>: <span class="type">CakeState</span>, <span class="params">action</span>: <span class="type">CakeAction</span>)</span> -&gt; <span class="type">CakeState</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state.apply(item: action) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="資料處理方式"><a href="#資料處理方式" class="headerlink" title="資料處理方式"></a>資料處理方式</h2><p>Swift 為了模擬出單向數據流的方式，利用屬性包裝 (Property Wrapper)，賦予了屬性有各種特性。</p><h3 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h3><p>此屬性會自動內部生成 setter 和 getter，當發數數值變化時，body 會自動進行刷新。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CakeState</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> unselect</span><br><span class="line">    <span class="keyword">case</span> didselect(item: <span class="type">CakeItem</span>)</span><br><span class="line">    <span class="keyword">var</span> message: <span class="type">String</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .unselect:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未選擇&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .didselect(<span class="keyword">let</span> item):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;已選擇 - <span class="subst">\(item.title)</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CakeView</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> cakeState: <span class="type">CakeState</span> <span class="operator">=</span> .unselect</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="type">CakeButtonRow</span>(cakeState: <span class="variable">$cakeState</span>, row: [.cocolate, .cheese, .strawberry])</span><br><span class="line">            .padding(.bottom)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Binding"><a href="#Binding" class="headerlink" title="@Binding"></a>@Binding</h3><p>如果用 @State 將父層的狀態傳到子層，但子層按鈕卻無法對最上層的 cakeState 進行改變，因此需要 @Binding，此屬性觀察的不是屬性本身，而是他的參考引用，並且傳遞時使用 $，這稱為投影属性(projection property)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CakeButtonRow</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> cakeState: <span class="type">CakeState</span></span><br><span class="line">    <span class="keyword">let</span> row: [<span class="type">CakeItem</span>]</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">ForEach</span>(row, id: \.<span class="keyword">self</span>) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">CakeButton</span>(</span><br><span class="line">                    title: item.title,</span><br><span class="line">                    backgroundColor: item.backgroundColor)</span><br><span class="line">                &#123;</span><br><span class="line">                    cakeState <span class="operator">=</span> .didselect(item: item)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Button: <span class="subst">\(item.title)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>展示 @State + @Binding 的結果，點擊下方按鈕會更新最上面的文字</p><img src="/pinkblog/2022/03/15/SwiftUI-%E5%92%8C-Combine-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%B8/2.png" class="" width="300"><hr><h3 id="ObservedObject"><a href="#ObservedObject" class="headerlink" title="@ObservedObject"></a>@ObservedObject</h3><p>@State 可以極為簡單處理一個單一資料的資料源，但如果需要一個多個資料的資料源的情境呢？或是更複雜的通知情境呢？</p><ol><li>必須要自行定義 Model 並且 conform ObservedObject，同時必須要是 class，例如 CakeModel</li><li>在 state 發生變化時(willSet)，需要利用 PassthroughSubject 物件，發動通知</li><li>宣告時使用 @ObservedObject 即可</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CakeModel</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> objectWillChange <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    <span class="keyword">var</span> state: <span class="type">CakeState</span> <span class="operator">=</span> .unselect &#123; </span><br><span class="line">        <span class="keyword">willSet</span> &#123; objectWillChange.send() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CakeView</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@State private var cakeState: CakeState = .unselect</span></span><br><span class="line">    <span class="meta">@ObservedObject</span> <span class="keyword">var</span> model <span class="operator">=</span> <span class="type">CakeModel</span>()</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="type">CakeButtonRow</span>(cakeState: <span class="variable">$model</span>.state, row: [.cocolate, .cheese, .strawberry])</span><br><span class="line">            .padding(.bottom)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CakeButtonRow</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ObservedObject</span> <span class="keyword">var</span> model: <span class="type">CakeModel</span></span><br><span class="line">    <span class="keyword">let</span> row: [<span class="type">CakeItem</span>]</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">ForEach</span>(row, id: \.<span class="keyword">self</span>) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">CakeButton</span>(</span><br><span class="line">                    title: item.title,</span><br><span class="line">                    backgroundColor: item.backgroundColor)</span><br><span class="line">                &#123;</span><br><span class="line">                    model.state <span class="operator">=</span> .didselect(item: item)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Button: <span class="subst">\(item.title)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Published"><a href="#Published" class="headerlink" title="@Published"></a>@Published</h3><p>如果手動進行通知其實蠻麻煩的，可以使用 @Published，預設就會帶有通知效果。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CakeModel</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> state: <span class="type">CakeState</span> <span class="operator">=</span> .unselect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EnvironmentObject"><a href="#EnvironmentObject" class="headerlink" title="@EnvironmentObject"></a>@EnvironmentObject</h3><p>上面提到的 @ObservedObject 的範例必須一層一層往下傳遞，導致撰寫上的麻煩，<br>因此父層可以使用 @EnvironmentObject，被標記的屬性會進行自動地查詢，<br>子層初始化時，不用由父層傳值下來就可進行使用，<br>有時候甚至中間層是不需要 model，可以節省中間層的傳遞。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CakeView</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> model: <span class="type">CakeModel</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="type">CakeButtonRow</span>(row: [.cocolate, .cheese, .strawberry]) <span class="comment">//&lt;---初始化不用設定model</span></span><br><span class="line">                .padding(.bottom)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CakeButtonRow</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> model: <span class="type">CakeModel</span></span><br><span class="line">    <span class="keyword">let</span> row: [<span class="type">CakeItem</span>]</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">ForEach</span>(row, id: \.<span class="keyword">self</span>) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">CakeButton</span>(</span><br><span class="line">                    title: item.title,</span><br><span class="line">                    backgroundColor: item.backgroundColor)</span><br><span class="line">                &#123;</span><br><span class="line">                    model.state <span class="operator">=</span> .didselect(item: item)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Button: <span class="subst">\(item.title)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化最上層物件時原本是使用 init 設定參數，但改成 .environmentObject 的方式設定。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CakeView</span>().environmentObject(<span class="type">CakeModel</span>())</span><br></pre></td></tr></table></figure><hr><h3 id="題外補充：Property-Wrapper"><a href="#題外補充：Property-Wrapper" class="headerlink" title="題外補充：Property Wrapper"></a>題外補充：Property Wrapper</h3><p>可以利用属性包装 (Property Wrapper)，對任何屬性進行 set 和 get 的封裝！ </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@propertyWrapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">State</span>&lt;<span class="title">Value</span>&gt;: <span class="title">DynamicViewProperty</span>, <span class="title">BindingConvertible</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">init</span>(<span class="params">initialValue</span> <span class="params">value</span>: <span class="type">Value</span>)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">Value</span> &#123; <span class="keyword">get</span> <span class="keyword">nonmutating</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> wrappedValue: <span class="type">Value</span> &#123; <span class="keyword">get</span> <span class="keyword">nonmutating</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> projectedValue: <span class="type">Binding</span>&lt;<span class="type">Value</span>&gt; &#123; <span class="keyword">get</span> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>initialValue: init方法，只有一個參數時直接給值，當然也可以更多參數</li><li>value: 實際存放的數值</li><li>wrappedValue: 實際上外部進行賦值和取值時，觸發的邏輯</li><li>projectedValue: 使用 $ 所傳遞的數值，遵守 BindingConvertible，就可以傳遞參考引用</li></ul><hr><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><ul><li><a href="https://github.com/pinkpika/CakeProject">CakeProject</a></li></ul><hr><h1 id="參考書籍"><a href="#參考書籍" class="headerlink" title="參考書籍"></a>參考書籍</h1><ul><li><a href="https://objccn.io/products/swift-ui">SwiftUI 与 Combine 编程 - 王巍</a> - 前三章</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;從 2019 年的 WWDC 發布 SwiftUI 和 Combine 至今過許久，但遲遲沒有開始學習和應用，最近想開始慢慢接觸它，這只是第一篇文章，未來會再持續記錄下去。&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
    <category term="SwiftUI" scheme="http://pinkpika.github.io/pinkblog/tags/SwiftUI/"/>
    
    <category term="Combine" scheme="http://pinkpika.github.io/pinkblog/tags/Combine/"/>
    
  </entry>
  
  <entry>
    <title>iOS Web API 設計 (Web API Design in iOS)</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/02/17/iOS-Web-API-%E8%A8%AD%E8%A8%88-Web-API-Design-in-iOS/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/02/17/iOS-Web-API-%E8%A8%AD%E8%A8%88-Web-API-Design-in-iOS/</id>
    <published>2022-02-17T03:05:18.000Z</published>
    <updated>2022-03-15T15:27:16.278Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>API 指的是應用程式之間溝通的介面，而本篇主題其實是前端呼叫後端 Web API 的設計，前端使用 Web API 可以拿到遠端的資料，也可依照不同用戶提供他們不同的內容，因此如何設計前端 Web API 層的邏輯變得很重要，需要兼具共用性和擴充性。</p></div><div class="note warning flat"><p>本篇所提及的 Web API 設計版本，其實是用來 <strong>紀錄自己曾經使用過的設計方式</strong>，未來也可能會再增加，所以內容有大量自身使用過的感想，<strong>不代表絕對的好壞，依照專案需求或架構會有更適合的設計方式</strong>。</p></div><h1 id="Web-API-設計的邏輯"><a href="#Web-API-設計的邏輯" class="headerlink" title="Web API 設計的邏輯"></a>Web API 設計的邏輯</h1><p>在實作 Web API 層的邏輯前，可以把它分成三段流程</p><img src="/pinkblog/2022/02/17/iOS-Web-API-%E8%A8%AD%E8%A8%88-Web-API-Design-in-iOS/0.png" class="" width="300"><h2 id="🔵-Part1-組合-Request-流程"><a href="#🔵-Part1-組合-Request-流程" class="headerlink" title="🔵 Part1 組合 Request 流程"></a>🔵 Part1 組合 Request 流程</h2><ul><li>如何組成 Request ?<ul><li>發送前需要設定好各項參數，可能包含有下列項目</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/URL_API">URL</a>: 請求的網址，包含 scheme、host、 port、path、query … 等等<ul><li>ex. <code>https://www.ios.com/api/user?id=9999&amp;type=1</code></li></ul></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">HTTP method</a>: 請求的方法，通常能反應出此 API 的目的<ul><li>ex. get、post、put、patch、delete ….</li></ul></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">HTTP header</a>: 請求的附加資料，有很多種已經定好的規範、也可以自訂資料<ul><li>ex. Content-Type: application/x-www-form-urlencoded</li><li>ex. Content-Type: application/json</li><li>ex. Authorization: Bearer …. =&gt; 身份驗證用</li><li>ex. Accept-Language: zh-TW =&gt; 指定語言用</li><li>ex. Tracing: …. =&gt; 客製化追蹤</li></ul></li><li>Body: 依照不同的 Content-Type 會塞不同的 Body<ul><li>ex. “action=getmemberdata&amp;id=111”.data(using: .utf8)</li><li>ex. “{&quot;action&quot;: &quot;getlatestposts&quot;,&quot;fetchcount&quot;: 20 }”.data(using: .utf8)</li></ul></li></ul></li></ul><h2 id="🔴-Part2-發送-API-流程"><a href="#🔴-Part2-發送-API-流程" class="headerlink" title="🔴 Part2 發送 API 流程"></a>🔴 Part2 發送 API 流程</h2><ul><li>使用什麼發送 API ?<ul><li>通常使用 <a href="https://developer.apple.com/documentation/foundation/urlsession">URLSession</a> 或是使用 <a href="https://github.com/Alamofire/Alamofire">Alamofire</a></li><li>選擇發送 Task 類型，一般 API 快速交握請求會使用 dataTask，此外 uploadTask、downloadTask 是用於長時間上傳或下載且可在背景執行。</li></ul></li><li>如何設定網路 Config ?<ul><li>怎麼處理網路層的邏輯封包、網路交握都被底層封裝了，只能設定一些通用屬性、Cookie、Cache 等等，可參考 <a href="https://developer.apple.com/documentation/foundation/urlsessionconfiguration">URLSessionConfiguration</a></li><li>值得注意的是 URLSession 對相同 host 並發 Request 是有上限的，如果有特殊需求需要調整，可參考 <a href="https://developer.apple.com/documentation/foundation/urlsessionconfiguration/1407597-httpmaximumconnectionsperhost">httpMaximumConnectionsPerHost</a></li><li>取得 task 進度，需要實作 <a href="https://developer.apple.com/documentation/foundation/urlsessiontaskdelegate">URLSessionTaskDelegate</a></li><li>取得狀態 task.state </li><li>強制取消 task.cancel (polling/long-polling可能會用到)</li></ul></li><li>如何接收回應 ?<ul><li>一種是使用 callback closure 的方式觸發</li><li>另一種就是 Swift 5.5 URLSession 開始支援 async await 的方式，寫起來更直觀更方便</li></ul></li><li>記得要注意 API 回來的 thread 是在哪裡 ?<ul><li>URLSession 的 dataTask callback 預設是 background thread</li><li>URLSession 的 async await 是回發送前的 thread</li><li>Alamofire callback 預設是 main thread</li></ul></li></ul><h2 id="🟢-Part3-處理-Response-流程"><a href="#🟢-Part3-處理-Response-流程" class="headerlink" title="🟢 Part3 處理 Response 流程"></a>🟢 Part3 處理 Response 流程</h2><ul><li>收到回應該如何處理 ?<ul><li>URLSession 回應通常會收到三個物件 Data、URLResponse、Error 皆為 optional<ul><li><code>dataTask(with request: URLRequest, completionHandler: @escaping (Data?, URLResponse?, Error?) -&gt; Void)</code></li></ul></li><li>通常先處理 <strong>Error</strong>，如果有值就是網路層就遇到問題</li><li>其次可以判斷 <strong>URLResponse 內的 statusCode</strong>，如果符合規範的 API 設計可以從 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status">HTTP statusCode</a> 判斷狀態<ul><li><code>(response as? HTTPURLResponse)?.statusCode</code></li><li>2XX 成功回應 </li><li>3XX 重新轉向的回應</li><li>4XX 用戶端的錯誤 =&gt; 400 無效請求、401 授權失敗 … </li><li>5XX 伺服器端錯誤 =&gt; 500 伺服器端內部未知錯誤 …</li></ul></li><li>最後要將 <strong>Data</strong> 轉換成預期的物件，有可能是後台定義好的回應物件或是錯誤物件</li></ul></li><li>如果發生錯誤，是否需要重試 ?</li><li>如果發生用戶沒有網路，如何通知用戶 ?</li><li>如果發生授權失敗或過期，是否需要自動重刷 token 或是通知畫面 ?</li></ul><p>上面三個部分也可能會加入 Debug Log 或是事件追蹤，當頁面的不同、用戶操作的不同、站台的不同也會進行不同的設定。<br>下面來試試看進行 Web API 的邏輯封裝和重複利用，每個版本都會示範 Get、Post+UrlEncoded、Post+Json，如果需要其他 method 可以自行新增。</p><hr><h1 id="Version1-：使用物件和方法封裝"><a href="#Version1-：使用物件和方法封裝" class="headerlink" title="[Version1]：使用物件和方法封裝"></a>[Version1]：使用物件和方法封裝</h1><img src="/pinkblog/2022/02/17/iOS-Web-API-%E8%A8%AD%E8%A8%88-Web-API-Design-in-iOS/1.png" class="" width="600"><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>使用單一或多個 Manager 封裝呼叫 API 的方法和處理方式，也是實作難度最低的</li><li>至少能確保呼叫 API 邏輯或三方依賴都可以鎖在 Manager 內部</li><li>每一道方法都是呼叫一道 API 自行實作 Part1、Part2、Part3，確保職責的單一性，理論上互相不干擾<ul><li>ex. <code>requestHttpBinGet</code>、<code>requestHttpBinPostUrlEncoded</code>、<code>requestHttpBinPostJson</code></li></ul></li><li>封裝共用的邏輯，像是解析回應物件、組裝 Header 等等<ul><li>ex. <code>handleResponse</code>、<code>addHeaderContentTypeJson</code>、<code>addHeaderContentTypeURLEncoded</code></li></ul></li></ul><h2 id="實作範例"><a href="#實作範例" class="headerlink" title="實作範例"></a>實作範例</h2><div class="tabs" id="version1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#version1-1">APIManager</button></li><li class="tab"><button type="button" data-href="#version1-2">APIManager+HttpBinGet</button></li><li class="tab"><button type="button" data-href="#version1-3">APIManager+HttpBinPostUrlEncoded</button></li><li class="tab"><button type="button" data-href="#version1-4">APIManager+HttpBinPostJson</button></li><li class="tab"><button type="button" data-href="#version1-5">URLRequest+AddHeader</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="version1-1"><figure class="highlight swift"><figcaption><span>APIManager.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API 管理者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIManager</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">APIManager</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">init</span>()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 處理回應</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">handleResponse</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="params">data</span>: <span class="type">Data</span>?, <span class="params">response</span>: <span class="type">URLResponse</span>?, <span class="params">error</span>: <span class="type">Error</span>?, <span class="params">completion</span>: <span class="keyword">@escaping</span> ((<span class="type">Result</span>&lt;<span class="type">T</span>,<span class="type">APIManagerError</span>&gt;) -&gt; <span class="type">Void</span>))</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error&#123;</span><br><span class="line">            completion(.failure(.requestError(error: error)))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> statusCode <span class="operator">=</span> (response <span class="keyword">as?</span> <span class="type">HTTPURLResponse</span>)<span class="operator">?</span>.statusCode&#123;</span><br><span class="line">            <span class="built_in">print</span>(statusCode)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> data <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(.failure(.nilData))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> response <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONDecoder</span>().decode(<span class="type">T</span>.<span class="keyword">self</span>, from: data) <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(.failure(.decodeError))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        completion(.success(response))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - 錯誤物件</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">APIManager</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 錯誤物件</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">APIManagerError</span>: <span class="title">Error</span></span>&#123;</span><br><span class="line">        <span class="keyword">case</span> requestError(error: <span class="type">Error</span>)</span><br><span class="line">        <span class="keyword">case</span> nilData</span><br><span class="line">        <span class="keyword">case</span> decodeError</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version1-2"><figure class="highlight swift"><figcaption><span>APIManager+HttpBinGet.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">APIManager</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HttpBinGetResponse</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Args</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">            <span class="keyword">let</span> value: <span class="type">String</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> args: <span class="type">Args</span></span><br><span class="line">        <span class="keyword">let</span> origin: <span class="type">String</span></span><br><span class="line">        <span class="keyword">let</span> url: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestHttpBinGet</span>(<span class="params">value</span>: <span class="type">String</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> ((<span class="type">Result</span>&lt;<span class="type">HttpBinGetResponse</span>,<span class="type">APIManagerError</span>&gt;) -&gt; <span class="type">Void</span>))</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Part1 組合 Request，使用方法或擴充封裝類似的邏輯</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://httpbin.org/get?value=<span class="subst">\(value)</span>&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">        request.method <span class="operator">=</span> .get</span><br><span class="line">        request.addHeaderAuthToken()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Part2 發動 API，如果有需求也可抽換</span></span><br><span class="line">        <span class="keyword">let</span> dataTask <span class="operator">=</span> <span class="type">URLSession</span>.shared.dataTask(with: request) &#123;</span><br><span class="line">            data, response, error <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Part3 處理 Response，使用方法或擴充封裝類似的邏輯</span></span><br><span class="line">            <span class="keyword">self</span>.handleResponse(data: data, response: response, error: error, completion: completion)</span><br><span class="line">        &#125;</span><br><span class="line">        dataTask.resume()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version1-3"><figure class="highlight swift"><figcaption><span>APIManager+HttpBinPostUrlEncoded.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">APIManager</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HttpBinPostUrlEncodedResponse</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Form</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">            <span class="keyword">let</span> value: <span class="type">String</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> form: <span class="type">Form</span></span><br><span class="line">        <span class="keyword">let</span> origin: <span class="type">String</span></span><br><span class="line">        <span class="keyword">let</span> url: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestHttpBinPostUrlEncoded</span>(<span class="params">value</span>: <span class="type">String</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> ((<span class="type">Result</span>&lt;<span class="type">HttpBinPostUrlEncodedResponse</span>,<span class="type">APIManagerError</span>&gt;) -&gt; <span class="type">Void</span>))</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Part1 組合 Request，使用方法或擴充封裝類似的邏輯</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://httpbin.org/post&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">        request.method <span class="operator">=</span> .post</span><br><span class="line">        request.addHeaderAuthToken()</span><br><span class="line">        request.addHeaderContentTypeURLEncoded()</span><br><span class="line">        request.httpBody <span class="operator">=</span> <span class="string">&quot;value=<span class="subst">\(value)</span>&quot;</span>.data(using: .utf8)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Part2 發動 API，如果有需求也可抽換</span></span><br><span class="line">        <span class="keyword">let</span> dataTask <span class="operator">=</span> <span class="type">URLSession</span>.shared.dataTask(with: request) &#123;</span><br><span class="line">            data, response, error <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Part3 處理 Response，使用方法或擴充封裝類似的邏輯</span></span><br><span class="line">            <span class="keyword">self</span>.handleResponse(data: data, response: response, error: error, completion: completion)</span><br><span class="line">        &#125;</span><br><span class="line">        dataTask.resume()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version1-4"><figure class="highlight swift"><figcaption><span>APIManager+HttpBinPostJson.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">APIManager</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HttpBinPostJsonResponse</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">JsonData</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">            <span class="keyword">let</span> value: <span class="type">String</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> json: <span class="type">JsonData</span></span><br><span class="line">        <span class="keyword">let</span> origin: <span class="type">String</span></span><br><span class="line">        <span class="keyword">let</span> url: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestHttpBinPostJson</span>(<span class="params">value</span>: <span class="type">String</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> ((<span class="type">Result</span>&lt;<span class="type">HttpBinPostJsonResponse</span>,<span class="type">APIManagerError</span>&gt;) -&gt; <span class="type">Void</span>))</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Part1 組合 Request，使用方法或擴充封裝類似的邏輯</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://httpbin.org/post&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">        request.method <span class="operator">=</span> .post</span><br><span class="line">        request.addHeaderAuthToken()</span><br><span class="line">        request.addHeaderContentTypeJson()</span><br><span class="line">        request.httpBody <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;value&quot;: &quot;<span class="subst">\(value)</span>&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.data(using: .utf8)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Part2 發動 API，如果有需求也可抽換</span></span><br><span class="line">        <span class="keyword">let</span> dataTask <span class="operator">=</span> <span class="type">URLSession</span>.shared.dataTask(with: request) &#123;</span><br><span class="line">            data, response, error <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Part3 處理 Response，使用方法或擴充封裝類似的邏輯</span></span><br><span class="line">            <span class="keyword">self</span>.handleResponse(data: data, response: response, error: error, completion: completion)</span><br><span class="line">        &#125;</span><br><span class="line">        dataTask.resume()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version1-5"><figure class="highlight swift"><figcaption><span>URLRequest+AddHeader.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">URLRequest</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@discardableResult</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">addHeaderAuthToken</span>()</span> -&gt; <span class="type">URLRequest</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.addValue(<span class="string">&quot;Bearer ......&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@discardableResult</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">addHeaderContentTypeJson</span>()</span> -&gt; <span class="type">URLRequest</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.addValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@discardableResult</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">addHeaderContentTypeURLEncoded</span>()</span> -&gt; <span class="type">URLRequest</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.addValue(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">APIManager</span>.shared.requestHttpBinGet(value: <span class="string">&quot;xxxx1&quot;</span>) &#123;</span><br><span class="line">    result <span class="keyword">in</span> <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">APIManager</span>.shared.requestHttpBinPostUrlEncoded(value: <span class="string">&quot;xxxx2&quot;</span>) &#123;</span><br><span class="line">    result <span class="keyword">in</span> <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">APIManager</span>.shared.requestHttpBinPostJson(value: <span class="string">&quot;xxxx3&quot;</span>) &#123;</span><br><span class="line">    result <span class="keyword">in</span> <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul><li><a href="https://github.com/pinkpika/APIRequestDesignDemo/tree/main/TestApp/APIRequestDesignVersion1">APIRequestDesignDemo - Version1</a></li></ul><hr><div class="note info flat"><p>🤔【 問題 】<br>實作每道 API 時都需要自行呼叫 Part1、Part2、Part3 不夠方便，很多時候都是相同流程卻要重複寫，希望有預設的流程，只需要定義請求的欄位和回應的物件就好。</p></div><hr><h1 id="Version2-：使用繼承和反射欄位"><a href="#Version2-：使用繼承和反射欄位" class="headerlink" title="[Version2]：使用繼承和反射欄位"></a>[Version2]：使用繼承和反射欄位</h1><img src="/pinkblog/2022/02/17/iOS-Web-API-%E8%A8%AD%E8%A8%88-Web-API-Design-in-iOS/2.png" class="" width="800"><h2 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h2><ul><li>使用 NetworkManager 封裝各種類型的請求方式</li><li>使用父類別 ( BaseRequest ) 和子類別繼承的特性<ul><li>定義請求通用的欄位 ex. Domain, Path, Method …. 等等，子類別可以自行修改</li><li>定義 send 方法實作 Part1、Part2、Part3，並呼叫 NetworkManager，子類別可以直接呼叫</li></ul></li><li>使用”反射欄位”來組合參數<ul><li>ex. get query, post body …. 等等</li></ul></li></ul><h2 id="實作範例-1"><a href="#實作範例-1" class="headerlink" title="實作範例"></a>實作範例</h2><div class="tabs" id="version2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#version2-1">NetworkManager</button></li><li class="tab"><button type="button" data-href="#version2-2">BaseRequest</button></li><li class="tab"><button type="button" data-href="#version2-3">HttpBinBase</button></li><li class="tab"><button type="button" data-href="#version2-4">HttpBinGet</button></li><li class="tab"><button type="button" data-href="#version2-5">HttpBinPostUrlEncoded</button></li><li class="tab"><button type="button" data-href="#version2-6">HttpBinPostJson</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="version2-1"><p><a href="https://github.com/pinkpika/APIRequestDesignDemo/blob/main/TestApp/APIRequestDesignVersion2/NetworkManager.swift">完整版 NetworkManager.swift</a></p><figure class="highlight swift"><figcaption><span>NetworkManager.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Network 管理者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkManager</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">NetworkManager</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">init</span>()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 轉換參數</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">convertParameters</span>(<span class="params">parameters</span>: [<span class="params">String</span>: <span class="keyword">Any</span>])</span> -&gt; [<span class="type">String</span>: <span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> temp: [<span class="type">String</span>: <span class="type">String</span>] <span class="operator">=</span> [:]</span><br><span class="line">        <span class="keyword">for</span> one <span class="keyword">in</span> parameters&#123;</span><br><span class="line">            <span class="keyword">switch</span> one.value &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">String</span>, <span class="keyword">is</span> <span class="type">Int</span>, <span class="keyword">is</span> <span class="type">Double</span>, <span class="keyword">is</span> <span class="type">CustomStringConvertible</span>:</span><br><span class="line">                temp[one.key] <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(one.value)</span>&quot;</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 處理回應</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">handleResponse</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="params">data</span>: <span class="type">Data</span>?, <span class="params">response</span>: <span class="type">URLResponse</span>?, <span class="params">error</span>: <span class="type">Error</span>?, <span class="params">completion</span>: <span class="keyword">@escaping</span> ((<span class="type">Result</span>&lt;<span class="type">T</span>,<span class="type">NetworkManagerError</span>&gt;) -&gt; <span class="type">Void</span>))</span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - 錯誤物件</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NetworkManager</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 錯誤物件</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">NetworkManagerError</span>: <span class="title">Error</span></span>&#123;</span><br><span class="line">        <span class="keyword">case</span> requestError(error: <span class="type">Error</span>)</span><br><span class="line">        <span class="keyword">case</span> nilData</span><br><span class="line">        <span class="keyword">case</span> decodeError</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Get 相關請求</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NetworkManager</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 發送 Get 請求</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sendGetRequest</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="operator">...</span>)</span> -&gt; <span class="type">URLSessionDataTask</span>?&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Post 相關請求</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NetworkManager</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 發送 Post UrlEncoded 請求</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sendPostUrlEncodedRequest</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="operator">...</span>)</span> -&gt; <span class="type">URLSessionDataTask</span>?&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 發送 Post JSON 請求</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sendPostJSONRequest</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="operator">...</span>)</span> -&gt; <span class="type">Void</span>)) -&gt; <span class="type">URLSessionDataTask</span>?&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version2-2"><figure class="highlight swift"><figcaption><span>BaseRequest.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseRequest</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Domain</span></span><br><span class="line">    <span class="keyword">var</span> domain: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Path</span></span><br><span class="line">    <span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 請求方法</span></span><br><span class="line">    <span class="keyword">var</span> method: <span class="type">HttpMethod</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .get</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 內容格式</span></span><br><span class="line">    <span class="keyword">var</span> contentType: <span class="type">ContentType</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .none</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Timeout</span></span><br><span class="line">    <span class="keyword">var</span> timeoutInterval: <span class="type">TimeInterval</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 發送請求</span></span><br><span class="line">    <span class="keyword">@discardableResult</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">send</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="params">completion</span>: <span class="keyword">@escaping</span> ((<span class="type">Result</span>&lt;<span class="type">T</span>,<span class="type">NetworkManager</span>.<span class="type">NetworkManagerError</span>&gt;) -&gt; <span class="type">Void</span>))</span> -&gt; <span class="type">URLSessionDataTask</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> urlString <span class="operator">=</span> domain <span class="operator">+</span> path</span><br><span class="line">        <span class="keyword">switch</span> method &#123;</span><br><span class="line">        <span class="keyword">case</span> .get:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NetworkManager</span>.shared.sendGetRequest(urlString: urlString, queryItems: getParameters(), timeoutInterval: timeoutInterval, completion: completion)</span><br><span class="line">        <span class="keyword">case</span> .post <span class="keyword">where</span> contentType <span class="operator">==</span> .urlencoded:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NetworkManager</span>.shared.sendPostUrlEncodedRequest(urlString: urlString, urlEncodedParas: getParameters(), timeoutInterval: timeoutInterval, completion: completion)</span><br><span class="line">        <span class="keyword">case</span> .post <span class="keyword">where</span> contentType <span class="operator">==</span> .json:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NetworkManager</span>.shared.sendPostJSONRequest(urlString: urlString, parameters: getParameters(), timeoutInterval: timeoutInterval, completion: completion)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 取得參數</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getParameters</span>()</span> -&gt; [<span class="type">String</span>: <span class="keyword">Any</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> getParameters(mirror: <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 取得參數(使用Mirror所有父類別的參數，並轉換為Dictionary)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getParameters</span>(<span class="params">mirror</span>: <span class="type">Mirror</span>)</span> -&gt; [<span class="type">String</span>: <span class="keyword">Any</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> parameters: [<span class="type">String</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [:]</span><br><span class="line">        <span class="keyword">if</span> mirror.superclassMirror <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            parameters <span class="operator">=</span> parameters.merging(getParameters(mirror: mirror.superclassMirror<span class="operator">!</span> ))&#123; <span class="variable">$1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> attr <span class="keyword">in</span> mirror.children &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> propertyName <span class="operator">=</span> attr.label &#123;</span><br><span class="line">                parameters[propertyName] <span class="operator">=</span> attr.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parameters</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BaseRequest</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ContentType</span></span>&#123;</span><br><span class="line">        <span class="keyword">case</span> none</span><br><span class="line">        <span class="keyword">case</span> urlencoded</span><br><span class="line">        <span class="keyword">case</span> json</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">HttpMethod</span></span>&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">get</span></span><br><span class="line">        <span class="keyword">case</span> post</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version2-3"><figure class="highlight swift"><figcaption><span>HttpBinBaseRequest.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpBinBaseRequest</span>: <span class="title">BaseRequest</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Domain</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> domain: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;https://httpbin.org/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version2-4"><figure class="highlight swift"><figcaption><span>HttpBinGetRequest+Response.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpBinGetRequest</span>: <span class="title">HttpBinBaseRequest</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;get&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> value: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setData</span>(<span class="params">value</span>: <span class="type">String</span>)</span> -&gt; <span class="keyword">Self</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HttpBinGetResponse</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Args</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">        <span class="keyword">let</span> value: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> args: <span class="type">Args</span></span><br><span class="line">    <span class="keyword">let</span> origin: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> url: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version2-5"><figure class="highlight swift"><figcaption><span>HttpBinPostUrlEncodedRequest+Response.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpBinPostUrlEncodedRequest</span>: <span class="title">HttpBinBaseRequest</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;post&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> method: <span class="type">HttpMethod</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .post</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> contentType: <span class="type">ContentType</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .urlencoded</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> value: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;我是資料&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setData</span>(<span class="params">value</span>: <span class="type">String</span>)</span> -&gt; <span class="keyword">Self</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HttpBinPostJsonResponse</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">JsonData</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">        <span class="keyword">let</span> value: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> json: <span class="type">JsonData</span></span><br><span class="line">    <span class="keyword">let</span> origin: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> url: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version2-6"><figure class="highlight swift"><figcaption><span>HttpBinPostJsonRequest+Response.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpBinPostUrlEncodedRequest</span>: <span class="title">HttpBinBaseRequest</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;post&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> method: <span class="type">HttpMethod</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .post</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> contentType: <span class="type">ContentType</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .urlencoded</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> value: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;我是資料&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setData</span>(<span class="params">value</span>: <span class="type">String</span>)</span> -&gt; <span class="keyword">Self</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HttpBinPostJsonResponse</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">JsonData</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">        <span class="keyword">let</span> value: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> json: <span class="type">JsonData</span></span><br><span class="line">    <span class="keyword">let</span> origin: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> url: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpBinGetRequest</span>().setData(value: <span class="string">&quot;wwww1&quot;</span>).send &#123;</span><br><span class="line">    (result: <span class="type">Result</span>&lt;<span class="type">HttpBinGetResponse</span>,<span class="type">NetworkManager</span>.<span class="type">NetworkManagerError</span>&gt;) <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">HttpBinPostUrlEncodedRequest</span>().setData(value: <span class="string">&quot;wwww2&quot;</span>).send &#123;</span><br><span class="line">    (result: <span class="type">Result</span>&lt;<span class="type">HttpBinPostUrlEncodedResponse</span>,<span class="type">NetworkManager</span>.<span class="type">NetworkManagerError</span>&gt;) <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">HttpBinPostJsonRequest</span>().setData(value: <span class="string">&quot;wwww3&quot;</span>).send &#123;</span><br><span class="line">    (result: <span class="type">Result</span>&lt;<span class="type">HttpBinPostJsonResponse</span>,<span class="type">NetworkManager</span>.<span class="type">NetworkManagerError</span>&gt;) <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h2><ul><li><a href="https://github.com/pinkpika/APIRequestDesignDemo/tree/main/TestApp/APIRequestDesignVersion2">APIRequestDesignDemo - Version2</a></li></ul><hr><div class="note info flat"><p>🤔【 問題 】<br>雖然建立 API 物件變得非常快速看似美好，但面對各種不同站台的需求，還有當初面對多達 40 幾隻 App 使用這套系統，NetworkManager 因應不同參數或預設值不斷地擴大請求方法，有時還需要不同設定值的 URLSession，BaseRequest 也開始新增不同子類別和子流程(有無身份驗證/有無特定Header/有無Log/不同處理回應的方式…)，有些特殊的 API 還會需要同時塞 query 加上 body，甚至需要新增各種 Bool 開關或是 Delegate 的通知接口。<br>第一次體驗到如此深刻的”繼承税”…😭😭😭</p></div><div class="note primary flat"><p>繼承税這個詞是我從「 <a href="https://www.tenlong.com.tw/products/9789865022754">The Pragmatic Programmer 20週年紀念版</a> 」看到的，書本引用一句話 “您只想要一根香蕉，但是您得到的卻是一隻拿著香蕉的大猩猩和整個叢林 - Joe Armstrong” 。</p><p>繼承就是一種耦合，父類別和子類別之間耦合、子類別新方法呼叫到父類別也是耦合，時間一久往往會迭代出多個類別的依賴關係，像是一個網狀一樣，修改需要小心影響上下功能；如果想要避免就是不要使用繼承，改用下列方式，詳情可以參考該書。</p><ul><li>interface/protocol </li><li>delegation </li><li>mixin/trait</li></ul></div><hr><div class="note success flat"><p>幸運的是正好看到 <a href="https://twitter.com/onevcat">onevcat</a> 大神在 iPlayground 2019 分享了 <a href="https://www.youtube.com/watch?v=Xk4HZfW6vK0">部件化網路程式設計</a> / <a href="https://hackmd.io/@iPlayground/2019/%2FUBGbW1PVSl69rpE2h38w7A">hackmd共筆</a> / <a href="https://github.com/onevcat/ComponentNetworking">ComponentNetworking Demo</a>，基本上可以達到每一道 API 抽換各種流程並且共用邏輯，甚至也可以進行單元測試或 Mock 資料；其中用部件並且”組合”出功能的概念頁也讓我想到 SwiftLee 這篇 <a href="https://www.avanderlee.com/swift/composition-inheritance-code-architecture/">Composition vs. Inheritance</a>。</p></div><hr><h1 id="Version3-：使用部件化設計"><a href="#Version3-：使用部件化設計" class="headerlink" title="[Version3]：使用部件化設計"></a>[Version3]：使用部件化設計</h1><p><strong>此版本是從上面提到 onevcat 大神分享的作法 fork 做修改，並且因為我遇到的需求做調整，所以不會是最完美最適合你的，但是部件化的概念很適合給大家來進行調整。</strong></p><img src="/pinkblog/2022/02/17/iOS-Web-API-%E8%A8%AD%E8%A8%88-Web-API-Design-in-iOS/3.png" class="" width="700"><h2 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h2><ul><li>Part1 組合 Request: <ul><li>使用 Adapter 組裝一個一個的部件，可以是新增一個 Header、也可以是新增 Token</li><li>每經過一個部件會回傳修改後的 URLRequest，會把所有 Adapter 都執行過一遍後回傳最終的 URLRequest</li></ul></li><li>Part2 發送 API: <ul><li>使用 protocol ApiComponentSendable 先預設定義一種發送流程，並且可抽換發送主體(Native/Alamofire/Mock都可)</li></ul></li><li>Part3 處理 Response: <ul><li>使用 Decision 一個一個決策決定該做什麼，例如接續決策、重頭開始、發生錯誤、結束決策</li><li>如果是”接續決策”就往下一個決策判斷</li><li>如果到最後還是沒有”結束決策”或是”發生錯誤”，就代表決策設定有問題</li></ul></li><li>在定義 Request 中使用 RequestBaseSetting 方便抽換基底設定(正式或測試機)</li><li>在處理 Response 中使用 DecisionRecord 可以在 Console 清楚顯示決策流程</li><li>之前接過特殊站台當回應成功時，statusCode = 200 但 Data 為空的，所以範例有個 NilDataDecision、NilDataResponse 可使用</li></ul><h2 id="實作範例-2"><a href="#實作範例-2" class="headerlink" title="實作範例"></a>實作範例</h2><p>下面只列出重要的物件，完整範例可以參考下面 Demo 網址！</p><div class="tabs" id="version3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#version3-1">Request</button></li><li class="tab"><button type="button" data-href="#version3-2">ApiComponentSendable</button></li><li class="tab"><button type="button" data-href="#version3-3">Adapter</button></li><li class="tab"><button type="button" data-href="#version3-4">Decision</button></li><li class="tab"><button type="button" data-href="#version3-5">GetRequest</button></li><li class="tab"><button type="button" data-href="#version3-6">HttpBinService</button></li><li class="tab"><button type="button" data-href="#version3-7">HttpBinService+HttpBinGet</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="version3-1"><p>Request 定義 Api 的 基礎設定(domain)、HTTPMethod、轉接器、決策路徑。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Request基礎設定</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">RequestBaseSetting</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Domain</span></span><br><span class="line">    <span class="keyword">var</span> domain: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 基底Request</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 基底Response</span></span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Response</span>: <span class="type">Decodable</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Request基礎設定</span></span><br><span class="line">    <span class="keyword">var</span> setting: <span class="type">RequestBaseSetting</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// HTTPMethod</span></span><br><span class="line">    <span class="keyword">var</span> method: <span class="type">HTTPMethod</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 請求轉接器(發送前處理)</span></span><br><span class="line">    <span class="keyword">var</span> adapters: [<span class="type">RequestAdapter</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 決策路徑(接收回應後處理)</span></span><br><span class="line">    <span class="keyword">var</span> decisions: [<span class="type">Decision</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/// 基底Request</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 建立Request</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buildRequest</span>()</span> <span class="keyword">throws</span> -&gt; <span class="type">URLRequest</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: setting.domain) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">ApiComponentError</span>.requestAdapterFailure(error: <span class="literal">nil</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> adapters.reduce(request) &#123; <span class="keyword">try</span> <span class="variable">$1</span>.adapted(<span class="variable">$0</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version3-2"><p>ApiComponentSendable 定義發送流程，包含 Part1 + Part2 + Part3，每個部分都是被組裝而成。<br><a href="https://github.com/pinkpika/APIRequestDesignDemo/blob/main/TestApp/APIRequestDesignVersion3/Component/ApiComponentSendable.swift">完整版 ApiComponentSendable.swift</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ApiComponentSendable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sendRequest</span>(<span class="params">request</span>: <span class="type">URLRequest</span>, <span class="params">queue</span>: <span class="type">DispatchQueue</span>, <span class="params">handler</span>: <span class="keyword">@escaping</span> (<span class="type">Data</span>?, <span class="type">URLResponse</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ApiComponentSendable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 發送Request(使用初始決策)</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">send</span>&lt;<span class="type">Req</span>: <span class="type">Request</span>&gt;(</span></span><br><span class="line"><span class="function">        <span class="params">request</span>: <span class="type">Req</span>,</span></span><br><span class="line"><span class="function">        <span class="params">queue</span>: <span class="type">DispatchQueue</span>,</span></span><br><span class="line"><span class="function">        <span class="params">handler</span>: <span class="keyword">@escaping</span> (<span class="type">Swift</span>.<span class="type">Result</span>&lt;<span class="type">Req</span>.<span class="type">Response</span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        send(request: request,</span><br><span class="line">             decisions: request.decisions,</span><br><span class="line">             queue: queue,</span><br><span class="line">             handler: handler)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 發送Request(使用特定決策)</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">send</span>&lt;<span class="type">Req</span>: <span class="type">Request</span>&gt;(</span></span><br><span class="line"><span class="function">        <span class="params">request</span>: <span class="type">Req</span>,</span></span><br><span class="line"><span class="function">        <span class="params">decisions</span>: [<span class="type">Decision</span>],</span></span><br><span class="line"><span class="function">        <span class="params">queue</span>: <span class="type">DispatchQueue</span>,</span></span><br><span class="line"><span class="function">        <span class="params">handler</span>: <span class="keyword">@escaping</span> (<span class="type">Swift</span>.<span class="type">Result</span>&lt;<span class="type">Req</span>.<span class="type">Response</span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Todo: 建立Request</span></span><br><span class="line">        request.buildRequest</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Todo: 發送 Request</span></span><br><span class="line">        sendRequest(request: urlRequest, queue: queue)&#123;</span><br><span class="line">            (data, response, error) <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Todo: - 預設處理 data, response, error</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Todo: - 處理決策</span></span><br><span class="line">            <span class="keyword">self</span>.handleDecision(</span><br><span class="line">                request: request,</span><br><span class="line">                queue: queue,</span><br><span class="line">                data: data,</span><br><span class="line">                response: httpResponse,</span><br><span class="line">                nowDecisions: decisions,</span><br><span class="line">                decisionRecords: [],</span><br><span class="line">                handler: handler</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 處理決策</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">handleDecision</span>&lt;<span class="type">Req</span>: <span class="type">Request</span>&gt;(</span></span><br><span class="line"><span class="function">        <span class="params">request</span>: <span class="type">Req</span>,</span></span><br><span class="line"><span class="function">        <span class="params">queue</span>: <span class="type">DispatchQueue</span>,</span></span><br><span class="line"><span class="function">        <span class="params">data</span>: <span class="type">Data</span>?,</span></span><br><span class="line"><span class="function">        <span class="params">response</span>: <span class="type">HTTPURLResponse</span>,</span></span><br><span class="line"><span class="function">        <span class="params">nowDecisions</span>: [<span class="type">Decision</span>],</span></span><br><span class="line"><span class="function">        <span class="params">decisionRecords</span>: [<span class="type">DecisionRecord</span>&lt;<span class="type">Req</span>&gt;],</span></span><br><span class="line"><span class="function">        <span class="params">handler</span>: <span class="keyword">@escaping</span> (<span class="type">Swift</span>.<span class="type">Result</span>&lt;<span class="type">Req</span>.<span class="type">Response</span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Todo: - 判斷是否應用決策</span></span><br><span class="line">        <span class="keyword">var</span> nowDecisions <span class="operator">=</span> nowDecisions</span><br><span class="line">        <span class="keyword">let</span> current <span class="operator">=</span> nowDecisions.removeFirst()</span><br><span class="line">        current.shouldApply <span class="operator">...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Todo: - 執行決策</span></span><br><span class="line">        current.apply(request: request, data: data, response: response) &#123; action <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判斷 action</span></span><br><span class="line">                <span class="comment">// Todo: 1 繼續執行</span></span><br><span class="line">                handleDecision</span><br><span class="line">                <span class="comment">// Todo: 2 重新開始    </span></span><br><span class="line">                send(<span class="operator">...</span>)發送<span class="type">Request</span>(使用特定決策)</span><br><span class="line">                <span class="comment">// Todo: 3 發生錯誤</span></span><br><span class="line">                handler(.failure(error))</span><br><span class="line">                <span class="comment">// Todo: 4 完成決策</span></span><br><span class="line">                handler(.success(response))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version3-3"><p>Adapter 就是用來組裝 Request 的各種部件，可以組合 Header 或是 body 都可以。</p><figure class="highlight swift"><figcaption><span>Adapter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 請求轉接器</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">RequestAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">adapted</span>(<span class="keyword">_</span> <span class="params">request</span>: <span class="type">URLRequest</span>)</span> <span class="keyword">throws</span> -&gt; <span class="type">URLRequest</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// HTTPMethod 的 轉接器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HTTPMethodAdapter</span>: <span class="title">RequestAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> method: <span class="type">HTTPMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">adapted</span>(<span class="keyword">_</span> <span class="params">request</span>: <span class="type">URLRequest</span>)</span> <span class="keyword">throws</span> -&gt; <span class="type">URLRequest</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> request</span><br><span class="line">        request.httpMethod <span class="operator">=</span> method.rawValue</span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// ContentType 的 轉接器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentTypeAdapter</span>: <span class="title">RequestAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> contentType: <span class="type">ContentType</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">adapted</span>(<span class="keyword">_</span> <span class="params">request</span>: <span class="type">URLRequest</span>)</span> <span class="keyword">throws</span> -&gt; <span class="type">URLRequest</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> request <span class="operator">=</span> request</span><br><span class="line">        request.setValue(contentType.rawValue, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version3-4"><p>Decision 有兩種方法 shouldApply 和 apply，當 shouldApply 為 true 的時候才會執行 apply。<br>apply 記得要執行任一種 DecisionAction 才會順利執行。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 決策方式</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Decision</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 是否要應用</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shouldApply</span>&lt;<span class="type">Req</span>: <span class="type">Request</span>&gt;(<span class="params">request</span>: <span class="type">Req</span>, <span class="params">data</span>: <span class="type">Data</span>?, <span class="params">response</span>: <span class="type">HTTPURLResponse</span>)</span> -&gt; <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 應用方式</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">apply</span>&lt;<span class="type">Req</span>: <span class="type">Request</span>&gt;(</span></span><br><span class="line"><span class="function">        <span class="params">request</span>: <span class="type">Req</span>,</span></span><br><span class="line"><span class="function">        <span class="params">data</span>: <span class="type">Data</span>?,</span></span><br><span class="line"><span class="function">        <span class="params">response</span>: <span class="type">HTTPURLResponse</span>,</span></span><br><span class="line"><span class="function">        <span class="params">done</span> <span class="params">closure</span>: <span class="keyword">@escaping</span> (<span class="type">DecisionAction</span>&lt;<span class="type">Req</span>&gt;) -&gt; <span class="type">Void</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 決策動作</span></span><br><span class="line"><span class="comment">/// - continueWith: 接續決策</span></span><br><span class="line"><span class="comment">/// - restartWith: 重頭開始</span></span><br><span class="line"><span class="comment">/// - errored: 發生錯誤</span></span><br><span class="line"><span class="comment">/// - done: 結束決策</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DecisionAction</span>&lt;<span class="title">Req</span>: <span class="title">Request</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> continueWith(<span class="type">Data</span>?, <span class="type">HTTPURLResponse</span>)</span><br><span class="line">    <span class="keyword">case</span> restartWith([<span class="type">Decision</span>])</span><br><span class="line">    <span class="keyword">case</span> errored(<span class="type">Error</span>)</span><br><span class="line">    <span class="keyword">case</span> done(<span class="type">Req</span>.<span class="type">Response</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 決策方式 - 錯誤狀態碼</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BadStatusCodeDecision</span>: <span class="title">Decision</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shouldApply</span>&lt;<span class="type">Req</span>: <span class="type">Request</span>&gt;(<span class="params">request</span>: <span class="type">Req</span>, <span class="params">data</span>: <span class="type">Data</span>?, <span class="params">response</span>: <span class="type">HTTPURLResponse</span>)</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="operator">!</span>(<span class="number">200</span><span class="operator">..&lt;</span><span class="number">300</span>).contains(response.statusCode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">apply</span>&lt;<span class="type">Req</span>: <span class="type">Request</span>&gt;(</span></span><br><span class="line"><span class="function">        <span class="params">request</span>: <span class="type">Req</span>,</span></span><br><span class="line"><span class="function">        <span class="params">data</span>: <span class="type">Data</span>?,</span></span><br><span class="line"><span class="function">        <span class="params">response</span>: <span class="type">HTTPURLResponse</span>,</span></span><br><span class="line"><span class="function">        <span class="params">done</span> <span class="params">closure</span>: <span class="keyword">@escaping</span> (<span class="type">DecisionAction</span>&lt;<span class="type">Req</span>&gt;) -&gt; <span class="type">Void</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        closure(.errored(<span class="type">ApiComponentError</span>.badStatusCode(data: data, statusCode: response.statusCode)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 決策方式 - 轉換物件</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ParseResultDecision</span>: <span class="title">Decision</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shouldApply</span>&lt;<span class="type">Req</span>: <span class="type">Request</span>&gt;(<span class="params">request</span>: <span class="type">Req</span>, <span class="params">data</span>: <span class="type">Data</span>?, <span class="params">response</span>: <span class="type">HTTPURLResponse</span>)</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">apply</span>&lt;<span class="type">Req</span>: <span class="type">Request</span>&gt;(</span></span><br><span class="line"><span class="function">        <span class="params">request</span>: <span class="type">Req</span>,</span></span><br><span class="line"><span class="function">        <span class="params">data</span>: <span class="type">Data</span>?,</span></span><br><span class="line"><span class="function">        <span class="params">response</span>: <span class="type">HTTPURLResponse</span>,</span></span><br><span class="line"><span class="function">        <span class="params">done</span> <span class="params">closure</span>: <span class="keyword">@escaping</span> (<span class="type">DecisionAction</span>&lt;<span class="type">Req</span>&gt;) -&gt; <span class="type">Void</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> data <span class="keyword">else</span> &#123;</span><br><span class="line">            closure(.errored(<span class="type">ApiComponentError</span>.nilData))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> value <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">Req</span>.<span class="type">Response</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">            closure(.done(value))</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            closure(.errored(<span class="type">ApiComponentError</span>.decodeFailure(data: data, error: error)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version3-5"><p>GetRequest conform Request，並且實作預設的 method、adapters、decisions。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 基底Request - Get</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">GetRequest</span>: <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Path</span></span><br><span class="line">    <span class="keyword">var</span> path: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Query Params</span></span><br><span class="line">    <span class="keyword">var</span> queryParams: [<span class="type">String</span>: <span class="type">String</span>]<span class="operator">?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 基底Request - Get</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">GetRequest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> method: <span class="type">HTTPMethod</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .get</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 預設的轉接器</span></span><br><span class="line">    <span class="keyword">var</span> adapters: [<span class="type">RequestAdapter</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="type">PathAdapter</span>(path: path),</span><br><span class="line">            <span class="type">HTTPMethodAdapter</span>(method: method),</span><br><span class="line">            <span class="type">QueryParamsAdapter</span>(queryParams: queryParams)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 預設的決策路徑</span></span><br><span class="line">    <span class="keyword">var</span> decisions: [<span class="type">Decision</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="type">BadStatusCodeDecision</span>(),</span><br><span class="line">            <span class="type">ParseResultDecision</span>()</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version3-6"><p>HttpBinService 用來放該站台的 Request、Response、預設的設定值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// HttpBinService ( https://httpbin.org/#/HTTP_Methods )</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HttpBinService</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 預設設定值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> defaultSetting: <span class="type">HttpBinServiceSetting</span> <span class="operator">=</span> .<span class="keyword">init</span>(status: .production)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// HttpBinServiceSetting</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HttpBinServiceSetting</span>: <span class="title">RequestBaseSetting</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 狀態(通常站台會有正式站和測試站，但也有可能更多)</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Status</span>: <span class="title">String</span></span>&#123;</span><br><span class="line">        <span class="keyword">case</span> debug <span class="operator">=</span> <span class="string">&quot;https://httpbin.debug.org&quot;</span></span><br><span class="line">        <span class="keyword">case</span> production <span class="operator">=</span> <span class="string">&quot;https://httpbin.org&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> status: <span class="type">Status</span></span><br><span class="line">    <span class="keyword">var</span> domain: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status.rawValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version3-7"><p>HttpBinGetRequest conform GetRequest，只要定義所需欄位就行！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">HttpBinService</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HttpBinGetRequest</span>: <span class="title">GetRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">Response</span> <span class="operator">=</span> <span class="type">HttpBinGetResponse</span></span><br><span class="line">        <span class="keyword">var</span> setting: <span class="type">RequestBaseSetting</span> <span class="operator">=</span> defaultSetting</span><br><span class="line">        <span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/get&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> queryParams: [<span class="type">String</span> : <span class="type">String</span>]<span class="operator">?</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;foo&quot;</span>: foo]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> foo: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HttpBinGetResponse</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Args</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> foo: <span class="type">String</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> args: <span class="type">Args</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="使用方式-2"><a href="#使用方式-2" class="headerlink" title="使用方式"></a>使用方式</h2><div class="tabs" id="version3demo"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#version3demo-1">基本用法</button></li><li class="tab"><button type="button" data-href="#version3demo-2">Mock測試</button></li><li class="tab"><button type="button" data-href="#version3demo-3">切換正式或測試環境</button></li><li class="tab"><button type="button" data-href="#version3demo-4">完全客製化Request</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="version3demo-1"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request1 <span class="operator">=</span> <span class="type">HttpBinService</span>.<span class="type">HttpBinGetRequest</span>(foo: <span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="type">ApiNativeClient</span>(session: .shared).send(request: request1, queue: .main) &#123;</span><br><span class="line">    result <span class="keyword">in</span> <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">🌐 [HttpBinGetRequest][GET]: https://httpbin.org/get?foo=123</span><br><span class="line">⏰ [HttpBinGetRequest][ReceiveTime]: 0.416s - https://httpbin.org/get?foo=123</span><br><span class="line">📦 [HttpBinGetRequest][StatusCode = 200][ReceiveData]: ...</span><br><span class="line">🚥 [HttpBinGetRequest][Decisions]: &#123;BadStatusCode❕&#125; -&gt; &#123;ParseResult❗️&#125;[Success!!!🙆🙆🙆]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version3demo-2"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Case: 進行 Mock 的測試</span></span><br><span class="line"><span class="keyword">var</span> request <span class="operator">=</span> <span class="type">HttpBinService</span>.<span class="type">HttpBinGetRequest</span>(foo: <span class="string">&quot;0000&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> dataString <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&quot;args&quot;:&#123;&quot;foo&quot;:&quot;0000&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> apiMockClient <span class="operator">=</span> <span class="type">ApiMockClient</span>(data: dataString.data(using: .utf8), statusCode: <span class="number">200</span>)</span><br><span class="line">apiMockClient.send(request: request, queue: .main) &#123;</span><br><span class="line">    result <span class="keyword">in</span> <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version3demo-3"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Case: 整個站台切換正式或測試環境</span></span><br><span class="line"><span class="type">HttpBinService</span>.defaultSetting.status <span class="operator">=</span> .debug</span><br><span class="line"><span class="keyword">let</span> request <span class="operator">=</span> <span class="type">HttpBinService</span>.<span class="type">HttpBinGetRequest</span>(foo: <span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="type">ApiNativeClient</span>(session: .shared).send(request: request, queue: .main) &#123;</span><br><span class="line">    result <span class="keyword">in</span> <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Case: 只切換一道 Api 正式或測試環境</span></span><br><span class="line"><span class="keyword">var</span> request <span class="operator">=</span> <span class="type">HttpBinService</span>.<span class="type">HttpBinGetRequest</span>(foo: <span class="string">&quot;123&quot;</span>)</span><br><span class="line">request.setting <span class="operator">=</span> <span class="type">HttpBinServiceSetting</span>.<span class="keyword">init</span>(status: .debug)</span><br><span class="line"><span class="type">ApiNativeClient</span>(session: .shared).send(request: request, queue: .main) &#123;</span><br><span class="line">    result <span class="keyword">in</span> <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="version3demo-4"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">HttpBinService</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HttpBinCustomRequest</span>: <span class="title">Request</span> </span>&#123;</span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">Response</span> <span class="operator">=</span> <span class="type">HttpBinCustomResponse</span></span><br><span class="line">        <span class="keyword">var</span> setting: <span class="type">RequestBaseSetting</span> <span class="operator">=</span> defaultSetting</span><br><span class="line">        <span class="keyword">var</span> method: <span class="type">HTTPMethod</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> .get <span class="comment">// <span class="doctag">TODO:</span> - Method</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> adapters: [<span class="type">RequestAdapter</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> - 請求轉接器</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> decisions: [<span class="type">Decision</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> - 決策路徑</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HttpBinCustomResponse</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> - 回應物件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h2><ul><li><a href="https://github.com/pinkpika/APIRequestDesignDemo/tree/main/TestApp/APIRequestDesignVersion3">APIRequestDesignDemo - Version3</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;API 指的是應用程式之間溝通的介面，而本篇主題其實是前端呼叫後端 Web API 的設計，前端使用 Web API 可以拿到遠端的資料，也可依照不同用戶提供他們不同的內容，因此如何設計前端 Web API 層的</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
    <category term="Web API" scheme="http://pinkpika.github.io/pinkblog/tags/Web-API/"/>
    
  </entry>
  
  <entry>
    <title>自建站台解決 CORS Policy 問題</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/02/15/%E8%87%AA%E5%BB%BA%E7%AB%99%E5%8F%B0%E8%A7%A3%E6%B1%BA-CORS-Policy-%E5%95%8F%E9%A1%8C/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/02/15/%E8%87%AA%E5%BB%BA%E7%AB%99%E5%8F%B0%E8%A7%A3%E6%B1%BA-CORS-Policy-%E5%95%8F%E9%A1%8C/</id>
    <published>2022-02-15T06:22:02.000Z</published>
    <updated>2022-02-17T18:17:52.738Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>有時候想寫個簡單的小工具來拉取或查詢 API 資料，可能是開源資料、可能是公司內部站台用的資料，<br>當然有很多前端平台可以選擇(網頁、手機、PC)，為了方便隨時開啟，有時會選擇簡單的靜態網頁，<br>但是使用網頁呼叫 API 可能會遇到 CORS Policy 的問題？那該如何解決呢？</p></div><h1 id="前端網頁呼叫-API"><a href="#前端網頁呼叫-API" class="headerlink" title="前端網頁呼叫 API"></a>前端網頁呼叫 API</h1><p>使用網頁呼叫 API 有很多方式，而且各有優缺點，可以參考其他大大寫的 <a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/ajax_fetch.html">AJAX與Fetch API</a>：</p><ul><li>AJAX 與 XMLHttpRequest</li><li>HTML5 的 Fetch</li><li>…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> requestOptions = &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span> &#125;;</span><br><span class="line">fetch(<span class="string">&quot;http://192.168.99.222:12345/api/Member/infos&quot;</span>, requestOptions)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> response.text())</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;#error&quot;</span>).innerHTML = <span class="string">``</span>;</span><br><span class="line">    jsonToResultTable(result);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>, error);</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;#error&quot;</span>).innerHTML = <span class="string">`<span class="subst">$&#123;error&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">window</span>.clearInterval(timeoutID);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>上面的程式碼在執行時會發生錯誤，打開 Condole 看，發現是關於 CORS Policy 的問題。</p></div><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to fetch at &#x27;http://....&#x27; from origin &#x27;null&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource. If an opaque response serves your needs, set the request&#x27;s mode to &#x27;no-cors&#x27; to fetch the resource with CORS disabled.</span><br></pre></td></tr></table></figure><h1 id="CORS-Policy-的用途"><a href="#CORS-Policy-的用途" class="headerlink" title="CORS Policy 的用途"></a>CORS Policy 的用途</h1><p>提及 CORS Policy，先理解一下什麼是<a href="https://developer.mozilla.org/zh-TW/docs/Web/Security/Same-origin_policy">同源政策</a> (Same-Origin Policy)<br>同源政策指的是說網頁透過 AJAX 或是 Fetch 技術存取資料時，必須達成下面三個條件</p><ol><li>相同協定 protocol</li><li>相同主機位置 domain</li><li>相同埠號 port </li></ol><p>如果不滿足就會是一個跨來源請求 (Cross-origin http request)!!<br>而 CORS Policy 全名為 Cross-origin resource sharing Policy，叫做”跨來源資源共享政策”，<br>它就是用來訂定跨來源的請求和伺服器該如何回應。</p><ul><li>前端網頁:</li></ul><p>如果是跨來源請求，網頁會自動補上 Access-Control-Request 相關參數，成為 Preflight Request。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /api/Member/infos</span><br><span class="line">Host: 192.168.99.222:12345</span><br><span class="line">Origin: ...</span><br><span class="line">Access-Control-Request-Method: GET</span><br><span class="line">Access-Control-Request-Headers: Content-Type</span><br></pre></td></tr></table></figure><ul><li>後端伺服器站台:</li></ul><p>伺服器端需要在回應的 Header 加上<br>Access-Control-Allow-Origin、Access-Control-Request-Method、Access-Control-Request-Headers 等設定，<br>用來規定伺服器能接受的來源 Origin、可用方法 Method、Header，<br>規則也很多，可以自行參考其他資料。</p><h1 id="CORS-Policy-的處理方式"><a href="#CORS-Policy-的處理方式" class="headerlink" title="CORS Policy 的處理方式"></a>CORS Policy 的處理方式</h1><ol><li>後端伺服器站台調整支援特定 Origin 或是 Header 的”跨來源請求”，這是最正規的方式，也是最適當的。</li><li>關閉瀏覽器的安全性設置，似乎有些招式可以關閉但可能不太安全 - <a href="https://alfilatov.com/posts/run-chrome-without-cors/">Run Chrome browser without CORS</a></li><li>使用代理站台，在後端呼叫 API 後再加上符合 CORS Policy 的 Header，回傳原始資料即可。</li></ol><div class="note warning flat"><p>在無法調整後端伺服器站台的前提下，感覺第三種可以玩玩看！</p></div><hr><h2 id="作法流程"><a href="#作法流程" class="headerlink" title="作法流程:"></a>作法流程:</h2><p>這裡是使用較簡易的建立站台方式，用 Node.js 單一腳本完成，<br>最後再使用前端網頁測試看看，是否可以轉打資料回來。</p><img src="/pinkblog/2022/02/15/%E8%87%AA%E5%BB%BA%E7%AB%99%E5%8F%B0%E8%A7%A3%E6%B1%BA-CORS-Policy-%E5%95%8F%E9%A1%8C/flow.png" class="" width="800"><h3 id="建立代理站台"><a href="#建立代理站台" class="headerlink" title="建立代理站台"></a>建立代理站台</h3><p>建立 App.js，並在終端機執行 <code>node app.js</code>，<br>應該會看到 <code>🟢 Server running at http://127.0.0.1:3000/</code>，就代表成功建立站台。</p><figure class="highlight javascript"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析url</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;🔵 Receive request: &quot;</span>+req.url);</span><br><span class="line">    <span class="keyword">let</span> urlObject = url.parse(req.url,<span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(urlObject);</span><br><span class="line">    <span class="keyword">let</span> queryObject = urlObject.query;</span><br><span class="line">    <span class="built_in">console</span>.log(queryObject);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這裡只示範 GET，其他方法自行擴充</span></span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">&#x27;GET&#x27;</span> &amp;&amp; urlObject.pathname == <span class="string">&#x27;/get&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        http.get(queryObject[<span class="string">&quot;target&quot;</span>], <span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> data = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            resp.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">                data += chunk;</span><br><span class="line">            &#125;);</span><br><span class="line">            resp.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 轉打成功後，自行加上 CORS 允許的 Header</span></span><br><span class="line">                res.statusCode = resp.statusCode;</span><br><span class="line">                res.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">                res.setHeader(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">                res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>);</span><br><span class="line">                res.end(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;).on(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;🔴 Error: &quot;</span> + err.message);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.statusCode = <span class="number">200</span>;</span><br><span class="line">        res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>);</span><br><span class="line">        res.end(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`🟢 Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;🔴 Caught exception: &#x27;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="打開網頁"><a href="#打開網頁" class="headerlink" title="打開網頁"></a>打開網頁</h3><p>要記得先編輯此網頁，把 fetch 的目標改成代理站台的 API，<br>例如上面規定的 path 為 /get，parameter 為 target = 某個API ( CORS 是被禁止或是被限制的 )<br><code>http://localhost:3000/get?target=http://.....</code><br>編輯好，就可以打開網頁有沒有資料回來。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>AppInfo Table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color:WhiteSmoke;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;setting&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin:10px 10px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-dark&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;onGetData()&quot;</span>&gt;</span>Get All Data!!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">onGetData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> requestOptions = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        fetch(<span class="string">&quot;http://localhost:3000/get?target=http://.....&quot;</span>, requestOptions) <span class="comment">// 這裡要呼叫 NodeJS 的站台，target=某個API ( CORS 是被禁止或是被限制的 )</span></span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="params">response</span> =&gt;</span> response.text())</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>, error);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;有時候想寫個簡單的小工具來拉取或查詢 API 資料，可能是開源資料、可能是公司內部站台用的資料，&lt;br&gt;當然有很多前端平台可以選擇(網頁、手機、PC)，為了方便隨時開啟，有時會選擇簡單的靜態網頁，&lt;br&gt;但是使用</summary>
      
    
    
    
    <category term="Web Development" scheme="http://pinkpika.github.io/pinkblog/categories/Web-Development/"/>
    
    
    <category term="Web" scheme="http://pinkpika.github.io/pinkblog/tags/Web/"/>
    
    <category term="CORS Policy" scheme="http://pinkpika.github.io/pinkblog/tags/CORS-Policy/"/>
    
    <category term="NodeJS" scheme="http://pinkpika.github.io/pinkblog/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>XCTest 和 Unit Testing Bundle</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/02/06/XCTest-%E5%92%8C-Unit-Testing-Bundle/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/02/06/XCTest-%E5%92%8C-Unit-Testing-Bundle/</id>
    <published>2022-02-06T08:15:10.000Z</published>
    <updated>2022-02-17T18:17:52.738Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>開始寫測試前必須先瞭解該平台用來寫測試的套件或框架，<br>例如 C# 的 MSTest、Java 的 JUnit、JavaScript 的 JsUnit，<br>當然在 iOS 平台上也有專屬的測試框架 XCTest。</p></div><h1 id="XCTest"><a href="#XCTest" class="headerlink" title="XCTest"></a>XCTest</h1><p>XCTest 是 Apple 官方出的測試框架，可以用來建立 Unit Testing、Performance Testing、UI Testing。</p><ul><li><a href="https://developer.apple.com/documentation/xctest">xctest 官方文件</a></li></ul><h1 id="Unit-Testing-Bundle"><a href="#Unit-Testing-Bundle" class="headerlink" title="Unit Testing Bundle"></a>Unit Testing Bundle</h1><p>Unit Testing Bundle 則是 Xcode 內建用來做單元測試的 Target。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol><li><p>新增 Target &gt; iOS Unit Testing Bundle (在建立專案時其實也可以直接勾選 Include Tests)</p><img src="/pinkblog/2022/02/06/XCTest-%E5%92%8C-Unit-Testing-Bundle/1.png" class="" width="600"></li><li><p>命名 Target 名稱 &gt; 完成安裝</p><img src="/pinkblog/2022/02/06/XCTest-%E5%92%8C-Unit-Testing-Bundle/2.png" class="" width="600"></li><li><p>通常需要測試的物件都在專案裡，所以 <code>TestAppTests.swift</code> 需要在最上面加上 <code>@testable import TestApp</code></p></li><li><p>也可以自行新增測試檔案進行分類，建議是一個類別對一個測試檔案，不要把所有類別的測試都寫在同一個檔案</p></li></ol><img src="/pinkblog/2022/02/06/XCTest-%E5%92%8C-Unit-Testing-Bundle/5.png" class="" width="800"><h2 id="撰寫測試"><a href="#撰寫測試" class="headerlink" title="撰寫測試"></a>撰寫測試</h2><h3 id="Setup-和-Teardown"><a href="#Setup-和-Teardown" class="headerlink" title="Setup 和 Teardown"></a>Setup 和 Teardown</h3><ul><li>SetUp：在測試執行前做一些初始化的設定。</li><li>TearDown：測試結束後，在這裡清除資料或設定，確保不會留下任何可能影響後續測試的東西。</li></ul><p>目前官方有提供很多種進階用法 <a href="https://developer.apple.com/documentation/xctest/xctestcase/set_up_and_tear_down_state_in_your_tests">Set Up and Tear Down State in Your Tests</a><br>例如初始化方式就有分同步或非同步，<br>或是提供 <code>addTeardownBlock</code> 來定義特定測試的 TearDown。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setUp</span>()</span> <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="comment">// 非同步執行初始化設定，並且可以 throws error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setUpWithError</span>()</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="comment">// 同步執行初始化設定，並且可以 throws error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setUp</span>()</span> &#123;</span><br><span class="line">    <span class="comment">// 同步執行初始化設定</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="XCTAssert"><a href="#XCTAssert" class="headerlink" title="XCTAssert"></a>XCTAssert</h3><p>用來驗證結果是否如預期，有很多種判斷方式。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> object: <span class="type">Date</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 判斷是否為True</span></span><br><span class="line"><span class="type">XCTAssert</span>(result)</span><br><span class="line"><span class="comment">// 判斷是否為false</span></span><br><span class="line"><span class="type">XCTAssertFalse</span>(result)</span><br><span class="line"><span class="comment">// 判斷是否相同</span></span><br><span class="line"><span class="type">XCTAssertEqual</span>(data, <span class="number">100</span>)</span><br><span class="line"><span class="comment">// 判斷是否不相同</span></span><br><span class="line"><span class="type">XCTAssertNotEqual</span>(data, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 判斷是否為空</span></span><br><span class="line"><span class="type">XCTAssertNil</span>(object)</span><br><span class="line"><span class="comment">// 判斷是否不為空</span></span><br><span class="line"><span class="type">XCTAssertNotNil</span>(object)</span><br><span class="line"><span class="comment">// 無條件失敗</span></span><br><span class="line"><span class="type">XCTFail</span>()</span><br></pre></td></tr></table></figure><img src="/pinkblog/2022/02/06/XCTest-%E5%92%8C-Unit-Testing-Bundle/3.png" class="" width="600"><h3 id="執行方式"><a href="#執行方式" class="headerlink" title="執行方式"></a>執行方式</h3><p>xcode 的介面上就有三種按法可以跑測試，當然也可以用終端機跑測試。<br>第一種比較特別，是要設定過 Scheme，並且長按編譯按鈕，然後改成執行測試。<br>第二或三種比較單純，直接執行單一檔案或是單一測試。</p><img src="/pinkblog/2022/02/06/XCTest-%E5%92%8C-Unit-Testing-Bundle/4.png" class="" width="800"><h3 id="單元測試命名"><a href="#單元測試命名" class="headerlink" title="單元測試命名"></a>單元測試命名</h3><ul><li>必須以前綴 test 開頭、不帶參數、不返回值，是否用底線由團隊而定</li><li>最好名稱能夠敘述測試的內容，或是包含預期的結果</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_NumberTool_IsPositive()</span><br><span class="line">testNumberToolIsPositive()</span><br><span class="line">testDataManagerGetDataFromServerStatusCode200()</span><br><span class="line">testDataManagerGetDataFromServerStatusCode400()</span><br></pre></td></tr></table></figure><hr><h1 id="如何把程式寫成可測試"><a href="#如何把程式寫成可測試" class="headerlink" title="如何把程式寫成可測試"></a>如何把程式寫成可測試</h1><ol><li>乾淨的架構 ( MVC、MVVM、VIPER、Clean 等等架構，架構的細膩程度會直接影響能測試的程度 )</li><li>職責單一的物件</li><li>抽離檔案系統 ( UserDefault or File )、資料庫 ( DataBase )、遠端資料 ( Api )<ul><li>抽離的方式最常見的就是使用 Protocol 抽離實作，並且使用依賴注入 ( DI ) 換成假資料</li><li>或是使用一些實作好 Mock 的套件，例如 <a href="https://cocoapods.org/pods/MockUserDefaults">MockUserDefaults</a></li></ul></li></ol><hr><h1 id="常見的測試案例"><a href="#常見的測試案例" class="headerlink" title="常見的測試案例"></a>常見的測試案例</h1><h2 id="對-Model-測試"><a href="#對-Model-測試" class="headerlink" title="對 Model 測試"></a>對 Model 測試</h2><p>可測試 Model 的建構式或是方法。</p><figure class="highlight swift"><figcaption><span>Cake.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cake</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> price: <span class="type">Double</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getPrice</span>(<span class="params">discount</span>: <span class="type">Double</span>)</span> -&gt; <span class="type">Double</span>?&#123;</span><br><span class="line">        <span class="keyword">guard</span> discount <span class="operator">&lt;=</span> <span class="number">1.0</span> <span class="operator">&amp;&amp;</span> discount <span class="operator">&gt;=</span> <span class="number">0.0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> price <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><figcaption><span>CakeTests.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testCakeGetPrice</span>()</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cake <span class="operator">=</span> <span class="type">Cake</span>(name: <span class="string">&quot;Strawberry Cake&quot;</span>, price: <span class="number">120</span>)</span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> cake.getPrice(discount: <span class="number">0.2</span>)</span><br><span class="line">    <span class="type">XCTAssertEqual</span>(result, <span class="number">96</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="對-API-測試"><a href="#對-API-測試" class="headerlink" title="對 API 測試"></a>對 API 測試</h2><p>針對 Server 呼叫 API 進行測試，確認回應物件是否如預期，<br>因為會依賴真實伺服器，所以不是單元測試而是整合測試。</p><p>官方針對非同步測試也有寫文章 - <a href="https://developer.apple.com/documentation/xctest/asynchronous_tests_and_expectations/testing_asynchronous_operations_with_expectations">Testing Asynchronous Operations with Expectations</a><br>需要建立 XCTestExpectation 並使用 wait，才能確保非同步下測試會正常。</p><figure class="highlight swift"><figcaption><span>DataManagerTests.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testDataManagerGetData</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 宣告expectation</span></span><br><span class="line">    <span class="keyword">let</span> expect <span class="operator">=</span> expectation(description: <span class="string">&quot;DataManager getData&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> dataManager <span class="operator">=</span> <span class="type">DataManager</span>()</span><br><span class="line">    dataManager.getData() &#123; </span><br><span class="line">        result <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> result &#123;</span><br><span class="line">        <span class="keyword">case</span> .success(<span class="keyword">let</span> data):</span><br><span class="line">            <span class="type">XCTAssert</span>(<span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">            <span class="type">XCTAssert</span>(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 完成結果</span></span><br><span class="line">        expect.fulfill()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等待非同步結果，timeout 時間為 30 秒</span></span><br><span class="line">    wait(for: [expect], timeout: <span class="number">30.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="對真實環境的抽離並測試"><a href="#對真實環境的抽離並測試" class="headerlink" title="對真實環境的抽離並測試"></a>對真實環境的抽離並測試</h2><p>當遇到檔案系統、資料庫、遠端資料，可用 Protocol 抽離實作並依賴注入(DI)<br>利用假資料來進行完整的商業邏輯的測試。</p><p>下面有四步驟：</p><ol><li>將呼叫遠端資料的邏輯都封裝在一個物件 <code>CakeAPIProvider</code>，好處是方便抽離</li><li>建立一個 protocol <code>CakeProvider</code>，把要抽離的方法都定義出來</li><li>真正在管理資料的 <code>CakeManager</code> 只要使用該 protocol 呼叫各種商業邏輯</li></ol><figure class="highlight swift"><figcaption><span>CakeProvider.swift CakeAPIProvider.swift CakeManager.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CakeProvider</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getData</span>(<span class="params">completion</span>: <span class="keyword">@escaping</span> ((<span class="type">Result</span>&lt;<span class="type">Cake</span>,<span class="type">Error</span>&gt;)-&gt;<span class="type">Void</span>))</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CakeAPIProvider</span>: <span class="title">CakeProvider</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getData</span>(<span class="params">completion</span>: <span class="keyword">@escaping</span> ((<span class="type">Result</span>&lt;<span class="type">Cake</span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>))</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;...&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="type">AF</span>.request(url).response&#123;</span><br><span class="line">            response <span class="keyword">in</span></span><br><span class="line">            <span class="comment">//completion(...)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CakeManager</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> provider: <span class="type">CakeProvider</span> <span class="operator">=</span> <span class="type">CakeAPIProvider</span>()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getCakePrice</span>(<span class="params">completion</span>: <span class="keyword">@escaping</span> ((<span class="type">Result</span>&lt;<span class="type">Double</span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>))</span>&#123;</span><br><span class="line">        provider.getData &#123;</span><br><span class="line">            result <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> result&#123;</span><br><span class="line">            <span class="keyword">case</span> .success(<span class="keyword">let</span> cake):</span><br><span class="line">                completion(.success(cake.price))</span><br><span class="line">            <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                completion(.failure(error))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//func ...</span></span><br><span class="line">    <span class="comment">//func ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>到時候要進行測試或抽換實作時，只要換 <code>CakeManager</code> 的 provider 即可！</li></ol><figure class="highlight swift"><figcaption><span>CakeManagerTests.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CakeMockProvider</span>: <span class="title">CakeProvider</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getData</span>(<span class="params">completion</span>: <span class="keyword">@escaping</span> ((<span class="type">Result</span>&lt;<span class="type">Cake</span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>))</span> &#123;</span><br><span class="line">        completion(.success(<span class="type">Cake</span>(name: <span class="string">&quot;MockCake&quot;</span>, price: <span class="number">100</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CakeManagerTests</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testCakeManager</span>()</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cakeManager <span class="operator">=</span> <span class="type">CakeManager</span>()</span><br><span class="line">        cakeManager.provider <span class="operator">=</span> <span class="type">CakeMockProvider</span>() <span class="comment">// 這裡進行抽換</span></span><br><span class="line">        cakeManager.getCakePrice &#123;</span><br><span class="line">            result <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> result&#123;</span><br><span class="line">            <span class="keyword">case</span>.success(<span class="keyword">let</span> price):</span><br><span class="line">                <span class="type">XCTAssertEqual</span>(price, <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                <span class="type">XCTFail</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="測試覆蓋率-Code-Coverage"><a href="#測試覆蓋率-Code-Coverage" class="headerlink" title="測試覆蓋率 (Code Coverage)"></a>測試覆蓋率 (Code Coverage)</h1><p>測試覆蓋率可以用來看在跑測試的過程中，有多少比例的程式有執行到。</p><h2 id="建立方式"><a href="#建立方式" class="headerlink" title="建立方式"></a>建立方式</h2><p>編輯 Scheme &gt; Test &gt; 勾選 Code Coverage，<br>可以選擇特定 target，盡量選擇自己專案就好，不然會包含一些三方依賴。 </p><img src="/pinkblog/2022/02/06/XCTest-%E5%92%8C-Unit-Testing-Bundle/6.png" class="" width="800"><h2 id="查看結果"><a href="#查看結果" class="headerlink" title="查看結果"></a>查看結果</h2><p>可以從 xcode 的活動紀錄裡看到 Coverage</p><img src="/pinkblog/2022/02/06/XCTest-%E5%92%8C-Unit-Testing-Bundle/7.png" class="" width="800"><p>追求 100％ 的測試覆蓋率其實不太容易，<br>更何況前端很多是 UI 相關的程式碼，也不是那麼容易寫單元測試，<br>至少確認重要邏輯或是關鍵路徑已經被測試就可以了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;開始寫測試前必須先瞭解該平台用來寫測試的套件或框架，&lt;br&gt;例如 C# 的 MSTest、Java 的 JUnit、JavaScript 的 JsUnit，&lt;br&gt;當然在 iOS 平台上也有專屬的測試框架 XCT</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
    <category term="Unit Testing" scheme="http://pinkpika.github.io/pinkblog/tags/Unit-Testing/"/>
    
  </entry>
  
  <entry>
    <title>Unit Testing 的入門介紹</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/02/06/Unit-Testing-%E7%9A%84%E5%85%A5%E9%96%80%E4%BB%8B%E7%B4%B9/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/02/06/Unit-Testing-%E7%9A%84%E5%85%A5%E9%96%80%E4%BB%8B%E7%B4%B9/</id>
    <published>2022-02-06T05:56:37.000Z</published>
    <updated>2022-02-17T18:17:52.737Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>常常聽到說寫測試可以確保程式碼品質、幫助我們不會修壞程式碼，<br>那具體來說測試到底是什麼樣的東西呢？</p></div><h1 id="單元測試-Unit-Testing"><a href="#單元測試-Unit-Testing" class="headerlink" title="單元測試 (Unit Testing)"></a>單元測試 (Unit Testing)</h1><p>單元測試是一組驗證功能的程式碼，這段程式會呼叫被測試的工作單元，並且針對結果進行驗證，<br>為了可以在開發過程中或是發布之前可以找到邏輯錯誤的功能，通常都會加在 CI/CD 的流程中。</p><p>一組單元測試通常有三個步驟：</p><ol><li>Arrange：準備 =&gt; 初始化並設定好要測驗的物件</li><li>Act：操作 =&gt; 執行要驗證的方法</li><li>Assert：驗證 =&gt; 對結果進行驗證是不是符合預期</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testNumberToolIsPositive</span>()</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Arrange：準備</span></span><br><span class="line">    <span class="keyword">let</span> numberTool <span class="operator">=</span> <span class="type">NumberTool</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Act：操作</span></span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> numberTool.isPositive(input: <span class="number">999</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Assert：驗證</span></span><br><span class="line">    <span class="type">XCTAssert</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="單元測試的關鍵特質"><a href="#單元測試的關鍵特質" class="headerlink" title="單元測試的關鍵特質"></a>單元測試的關鍵特質</h1><ol><li>自動化且可被重複執行的</li><li>容易實作的</li><li>容易執行的 (隨便按個鈕就可以)</li><li>非臨時性的 (這個測試到第二天第三天仍有意義，並可以執行)</li><li>執行速度很快的</li><li>執行結果一致的</li><li>完全獨立的 (不依賴其他因素或測試)</li><li>測試目標清楚的 (發生錯誤可以明確知道哪裡有問題)</li></ol><div class="note warning flat"><p>假設你的測試有不符合上面單元測試的特質，很有可能你的是屬於”整合測試”</p></div><h1 id="整合測試-Integration-Testing"><a href="#整合測試-Integration-Testing" class="headerlink" title="整合測試 (Integration Testing)"></a>整合測試 (Integration Testing)</h1><p>當你的測試依賴某種環境或是帶有不定因素(例如系統時間、網路狀態)，<br>或是用到了真實的檔案系統或是資料庫等等，這些測試都將屬於整合測試。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testDataManagerGetDataFromServer</span>()</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> dataManager <span class="operator">=</span> <span class="type">DataManager</span>()</span><br><span class="line">    dataManager.getDataFromServer &#123; <span class="comment">// ---&gt; 假設此方法呼叫了Api</span></span><br><span class="line">        result <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> result&#123;</span><br><span class="line">        <span class="keyword">case</span> .success(<span class="keyword">let</span> data):</span><br><span class="line">            <span class="type">XCTAssert</span>(<span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">            <span class="type">XCTAssert</span>(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整合測試依然有必要，但有個問題就是一次測試太多東西，<br>無法確定到底是誰壞了，到底是前端 API 物件寫壞還是 Server 目前是壞掉的呢？</p><hr><div class="note warning flat"><p>寫好單元測試就好了嗎？</p></div><img src="/pinkblog/2022/02/06/Unit-Testing-%E7%9A%84%E5%85%A5%E9%96%80%E4%BB%8B%E7%B4%B9/unitTests.gif" class="" width="300" title="兩個完美的單元測試，不代表運作會正常..."><hr><h1 id="測試金字塔-Testing-Pyramid"><a href="#測試金字塔-Testing-Pyramid" class="headerlink" title="測試金字塔 (Testing Pyramid)"></a>測試金字塔 (Testing Pyramid)</h1><p>前端往往包含大量 UI 的互動和多樣的資料來源，<br>如果只依靠單元測試，可能沒辦法完全測試出可能的問題，所以衍伸出不同層級的測試方式，也就是測試金字塔。<br>網路上有各種不同的版本，依照不同產品可衍生不同分層，但是想表達的概念都大同小異！</p><img src="/pinkblog/2022/02/06/Unit-Testing-%E7%9A%84%E5%85%A5%E9%96%80%E4%BB%8B%E7%B4%B9/testing-pyramid.png" class="" width="500"><p>這裡簡單說明最常見的三層：</p><table><thead><tr><th></th><th>定義</th><th>特點</th></tr></thead><tbody><tr><td>UI測試(UI Testing)</td><td>從使用者角度的測試，實際操作App</td><td>速度慢、撰寫成本高、維護成本高</td></tr><tr><td>整合測試(Integration Testing)</td><td>測試包含實際的伺服器、DB</td><td>介於中間</td></tr><tr><td>單元測試(Unit Testing)</td><td>單純測試邏輯，並隔離所有外部因素</td><td>速度快、撰寫成本低、維護成本低</td></tr></tbody></table><p>撰寫測試的順序是由下至上，像是蓋房子一樣，<br>通常單元測試是涵蓋範圍最大的，需要針對大部分的 <strong>基底物件方法和商業邏輯</strong> 進行測試，<br>而整合測試、UI測試應該會越來越少才對，對 <strong>關鍵路徑(Critical Path)</strong> 進行測試即可。</p><h1 id="推薦書單"><a href="#推薦書單" class="headerlink" title="推薦書單"></a>推薦書單</h1><p><a href="https://www.tenlong.com.tw/products/9789864342471?list_name=srh">單元測試的藝術(The Art of Unit Testing)</a></p><p>最重要的三個章節：</p><ul><li>第1章：單元測試定義</li><li>第8章：好的單元測試</li><li>第11章：如何讓程式變可測試</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;常常聽到說寫測試可以確保程式碼品質、幫助我們不會修壞程式碼，&lt;br&gt;那具體來說測試到底是什麼樣的東西呢？&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;單元測試-Unit-Testing&quot;&gt;&lt;a href=&quot;#單元測試</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
    <category term="Unit Testing" scheme="http://pinkpika.github.io/pinkblog/tags/Unit-Testing/"/>
    
  </entry>
  
  <entry>
    <title>SwiftLint 靜態檢查器</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/02/01/SwiftLint-%E9%9D%9C%E6%85%8B%E6%AA%A2%E6%9F%A5%E5%99%A8/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/02/01/SwiftLint-%E9%9D%9C%E6%85%8B%E6%AA%A2%E6%9F%A5%E5%99%A8/</id>
    <published>2022-02-01T05:40:55.000Z</published>
    <updated>2022-02-17T18:17:52.737Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>本篇會介紹 Coding Style 與 iOS 平台上最活躍的靜態檢查器 SwiftLint，<br>可以幫助你的程式碼保持一致的風格，並且讓團隊有相同的規範可以遵循。</p></div><h1 id="CodingStyle"><a href="#CodingStyle" class="headerlink" title="CodingStyle"></a>CodingStyle</h1><p>CodingStyle 就是指寫作程式碼的風格，其中包含很多面向，<br>例如說是變數命名方式、是否有空格、是否要換行、註解格式、修飾詞的順序等等，<br>有時程式碼的功能是相同的，但是會因為風格的不同導致看起來差很多，嚴重一點甚至會有閱讀上的困難，<br>因此往往成熟的團隊會需要訂定一套規則來規範它。</p><h1 id="CodingStyle-規則"><a href="#CodingStyle-規則" class="headerlink" title="CodingStyle 規則"></a>CodingStyle 規則</h1><p>CodingStyle 規則就像一份穿搭規則，可以讓團隊裡的程式碼保持下面三個特點。</p><ol><li>可讀性</li><li>易維護</li><li>一致性</li></ol><p>自己定義一套穿搭規則其實蠻不容易的，因此可以參考下面兩個網站。</p><ol><li><a href="https://www.swift.org/documentation/api-design-guidelines/">swift.org - API Design Guidelines</a><ul><li>swift 官方的 API 設計方式，比較偏概念性</li></ul></li><li><a href="https://github.com/raywenderlich/swift-style-guide">raywenderlich - Swift Style</a><ul><li>raywenderlich 出的一套 CodingStyle，目前算是開源社群裡最多人遵循的的一套規則</li><li>定義的規則也相當明確，會跟你說什麼是對的、什麼是錯的</li></ul></li></ol><h1 id="CodingStyle-靜態檢查器"><a href="#CodingStyle-靜態檢查器" class="headerlink" title="CodingStyle 靜態檢查器"></a>CodingStyle 靜態檢查器</h1><p>有了穿搭規則還需要一位服裝審核員幫我們檢驗，檢查程式碼是否有依照規則穿搭，<br>最大的好處是可以自動化地檢查寫作風格是否正確，甚至有些可以幫你自動修正。</p><h2 id="SwiftLint"><a href="#SwiftLint" class="headerlink" title="SwiftLint"></a>SwiftLint</h2><p><a href="https://github.com/realm/SwiftLint">SwiftLint</a> 則是 <a href="https://github.com/realm">realm</a> 公司出的一款 CodingStyle 靜態檢查器，<br>選用此工具原因是目前熱門獨大且唯一持續更新，<br>而且 SwiftLint 的預設規則就遵循大部分 raywenderlich 的 Swift Style。</p><h3 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h3><ol><li><p>在終端機輸入下方指令，專案初始化pod (請事先電腦安裝過 CocoaPods)</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure></li><li><p>設定 PodFile，開啟專案內的 PodFile 檔案加入下面程式碼</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">&#x27;SwiftLint&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在終端機輸入下方指令，安裝三方</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure></li><li><p>設定 Build Phases，開啟專案內設定Build Phases &gt; 按 “＋” &gt; RunScript &gt; 輸入下方腳本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;$&#123;PODS_ROOT&#125;/SwiftLint/swiftlint&quot; lint</span><br></pre></td></tr></table></figure></li></ol><h3 id="執行方法"><a href="#執行方法" class="headerlink" title="執行方法"></a>執行方法</h3><p>直接按下編譯即可！</p><img src="/pinkblog/2022/02/01/SwiftLint-%E9%9D%9C%E6%85%8B%E6%AA%A2%E6%9F%A5%E5%99%A8/1.png" class="" width="800"><h3 id="禁用規則"><a href="#禁用規則" class="headerlink" title="禁用規則"></a>禁用規則</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swiftlint:disable colon</span></span><br><span class="line"><span class="keyword">let</span> noWarning :<span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> <span class="comment">// 我被跳過了</span></span><br><span class="line"><span class="comment">// swiftlint:enable colon</span></span><br><span class="line"><span class="keyword">let</span> hasWarning :<span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> <span class="comment">// 我被禁止了</span></span><br></pre></td></tr></table></figure><h3 id="規則清單"><a href="#規則清單" class="headerlink" title="規則清單"></a>規則清單</h3><p>下面連結的每一條都是一條規則，有些是預設有、有些是預設沒有，<br>並且每一條都有詳細的範例說明怎樣是正確的、怎樣是錯誤的。</p><p><a href="https://realm.github.io/SwiftLint/rule-directory.html">Rule Directory</a></p><h3 id="客製化規則"><a href="#客製化規則" class="headerlink" title="客製化規則"></a>客製化規則</h3><p>當然有時候會需要調整成適合團隊的規範，請先依照下面步驟調整 Config，<br>最後細部調整 Config 檔案內的規則即可。</p><ol><li><p>調整 Build Phases</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;$&#123;PODS_ROOT&#125;/SwiftLint/swiftlint&quot; lint --config &quot;$&#123;SRCROOT&#125;/swiftlint.yml&quot;</span><br></pre></td></tr></table></figure></li><li><p>放入規則設定檔，放在專案的根目錄，叫做”swiftlint.yml”</p></li><li><p>一樣直接按下編譯即可！</p></li></ol><img src="/pinkblog/2022/02/01/SwiftLint-%E9%9D%9C%E6%85%8B%E6%AA%A2%E6%9F%A5%E5%99%A8/2.png" class="" width="800"><h3 id="客製化規則範例"><a href="#客製化規則範例" class="headerlink" title="客製化規則範例"></a>客製化規則範例</h3><p>Swiftlint 的客製化規則是非常彈性的，<br>可以開啟或關閉某些規則，<br>甚至可以用正規表達式定義全新的規則，<br>發生不符合規則要觸發”warning”或是”error”也可以自由決定，<br>也可以跳過固定的路徑的檢查，例如 Pods 裡的三方檔案，避免浪費檢查效能，<br>最後連報錯的方式也提供很多種，例如 xcode, json … 等等支援各式各樣的報告。</p><p>這裡有一個完整範例可以參考：<a href="https://github.com/pinkpika/SwiftLintDemo/blob/main/swiftlint.yml">swiftlint.yml</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不啟用的規則</span></span><br><span class="line"><span class="attr">disabled_rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 啟用的規則</span></span><br><span class="line"><span class="attr">opt_in_rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客製化的規則</span></span><br><span class="line"><span class="attr">custom_rules:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行linting包含的路徑</span></span><br><span class="line"><span class="attr">included:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行linting忽略的路徑(優先度大於included)</span></span><br><span class="line"><span class="attr">excluded:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 報錯類型</span></span><br><span class="line"><span class="attr">reporter:</span> <span class="string">&quot;xcode&quot;</span></span><br></pre></td></tr></table></figure><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><ul><li><a href="https://github.com/sleekbyte/tailor">tailor</a>：另一套靜態檢查器<ul><li>但有個嚴重問題，目前只支援到Swift3.0，無人更新…</li></ul></li><li><a href="https://github.com/nicklockwood/SwiftFormat">SwiftFormat</a>：強制格式化的工具<ul><li>尚未深入研究，但能設定的條件不夠多。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;本篇會介紹 Coding Style 與 iOS 平台上最活躍的靜態檢查器 SwiftLint，&lt;br&gt;可以幫助你的程式碼保持一致的風格，並且讓團隊有相同的規範可以遵循。&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&quot;</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
    <category term="CodingStyle" scheme="http://pinkpika.github.io/pinkblog/tags/CodingStyle/"/>
    
  </entry>
  
  <entry>
    <title>DispatchQueue 的簡單應用</title>
    <link href="http://pinkpika.github.io/pinkblog/2022/01/26/DispatchQueue-%E7%9A%84%E7%B0%A1%E5%96%AE%E6%87%89%E7%94%A8/"/>
    <id>http://pinkpika.github.io/pinkblog/2022/01/26/DispatchQueue-%E7%9A%84%E7%B0%A1%E5%96%AE%E6%87%89%E7%94%A8/</id>
    <published>2022-01-26T06:23:27.000Z</published>
    <updated>2022-02-17T18:17:52.736Z</updated>
    
    <content type="html"><![CDATA[<div class="note default flat"><p>本篇內容以非常初階的方式介紹 DispatchQueue，<br>同時會說明 iOS 體系裡最流行的多緒處理的技術 GCD 和一些應用情境和範例，<br>後來也有用在公司培訓初次接觸 iOS 工程師的一段課程裡。</p></div><div class="note warning flat"><p>不過本篇的主題不是最新 Swift 5.5 的 async/await，將會著重在 GCD 的 DispatchQueue</p></div><h1 id="提及-DispatchQueue-前，先需要知道多執行緒的應用程式如何運作的？"><a href="#提及-DispatchQueue-前，先需要知道多執行緒的應用程式如何運作的？" class="headerlink" title="提及 DispatchQueue 前，先需要知道多執行緒的應用程式如何運作的？"></a>提及 DispatchQueue 前，先需要知道多執行緒的應用程式如何運作的？</h1><img src="/pinkblog/2022/01/26/DispatchQueue-%E7%9A%84%E7%B0%A1%E5%96%AE%E6%87%89%E7%94%A8/1.png" class="" width="400"><ul><li>Program: <ul><li>應用程式本身</li></ul></li><li>Process: <ul><li>開啟應用程式後的實體</li><li>每個 Process 都是獨立的，無法自由讀取其他 Process 的資源</li><li>像是裝有 Thread 的容器</li></ul></li><li>Thread: <ul><li>每個 Process 會有管理多個 Thread</li><li>同一個 Process 底下的  Thread 就可以存取相同資源 (例如記憶體變數等等)</li><li>多執行緒處理需要非常細微的操作，容易發生互搶資源，死結 DeadLock 的問題</li></ul></li><li>Core: <ul><li>就是硬體上的核心，通常是多核心處理</li><li>一個 Core 通常同一時間只能處理一個 Thread (還是有些例外像是 Hyper-Threading)</li></ul></li></ul><img src="/pinkblog/2022/01/26/DispatchQueue-%E7%9A%84%E7%B0%A1%E5%96%AE%E6%87%89%E7%94%A8/2.png" class="" width="800"><div class="note info flat"><p>多執行緒程式碼可以同時間處理多項任務，然而處理多項任務就是需要操作 Thread</p></div><h1 id="iOS-的多緒開發方式"><a href="#iOS-的多緒開發方式" class="headerlink" title="iOS 的多緒開發方式"></a>iOS 的多緒開發方式</h1><ol><li><p>第一種：<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html">Threading Programming Guide</a><br>自行建立 NSThread 並且需要自行管理 Autorelease Pool<br>需要定義 Atomic 變數或是自行管理 NSLock 來處理同步問題 </p></li><li><p>第二種：<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html">Concurrency Programming Guide</a><br>名為 Grand Central Dispatch ( GCD )<br>消除建立與管理 Thread 所需程式碼，僅需定義任務，讓系統自行管理排程<br>可以高效穩定地避免同步和 DeadLock 問題</p></li><li><p>第三種：<a href="https://developer.apple.com/documentation/swift/swift_standard_library/concurrency/updating_an_app_to_use_swift_concurrency">Swift Concurrency</a><br>最新的 Swift 5.5 提供了更直觀、更安全的寫法<br>包含 async/await、Actor 等等好用的語法</p></li></ol><h1 id="Grand-Central-Dispatch-GCD"><a href="#Grand-Central-Dispatch-GCD" class="headerlink" title="Grand Central Dispatch ( GCD )"></a>Grand Central Dispatch ( GCD )</h1><p>目前提供了三種方法處理多執行緒</p><ol><li>第一種：Dispatch Queues<ul><li>利用 DispatchQueue，可以輕鬆達到 asynchronously 異步和 concurrently 並發的方式，處理你的工作</li><li>依照先出原則管理</li></ul></li><li>第二種：Dispatch Sources<ul><li>可以處理 Dispatch 的底層系統事件的通知</li></ul></li><li>第三種：Operation Queues<ul><li>預設並行方式，不依照先進先出原則，根據優先順序決定</li></ul></li></ol><h1 id="DispatchQueue-的建立與發動"><a href="#DispatchQueue-的建立與發動" class="headerlink" title="DispatchQueue 的建立與發動"></a>DispatchQueue 的建立與發動</h1><h3 id="建立方式有兩種"><a href="#建立方式有兩種" class="headerlink" title="建立方式有兩種"></a>建立方式有兩種</h3><img src="/pinkblog/2022/01/26/DispatchQueue-%E7%9A%84%E7%B0%A1%E5%96%AE%E6%87%89%E7%94%A8/3.png" class="" width="400"><ol><li>Serial：串行的方式執行工作，一次只能執行一項任務</li><li>Concurrent：並發的方式執行工作，可以同時執行多項任務</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定名稱可用於取得相同 Queue 或是避免衝突</span></span><br><span class="line"><span class="keyword">let</span> serialQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;serialQueue&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> concurrentQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;concurrentQueue&quot;</span>, attributes: .concurrent)</span><br></pre></td></tr></table></figure><p>也可以執行呼叫出系統預設的 DispatchQueue</p><ol><li>DispatchQueue.main<ul><li>屬於 Serial 方式</li><li>全域可以操作的主要 Queue</li><li>UI相關的操作必須要在這裡操作</li></ul></li><li>DispatchQueue.global<ul><li>屬於 Concurrent 方式</li><li>適合在背景處理大量計算</li></ul></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mainQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>.main <span class="comment">//&lt;——- 為 serial</span></span><br><span class="line"><span class="keyword">let</span> globalQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>.global() <span class="comment">//&lt;——- 為 concurrent</span></span><br></pre></td></tr></table></figure><h3 id="發動方式有兩種"><a href="#發動方式有兩種" class="headerlink" title="發動方式有兩種"></a>發動方式有兩種</h3><ol><li>Synchronously 同步發動：發動工作後，必須執行完成工作，才能往下執行<ul><li><code>queue.sync &#123; 定義你要做的工作 &#125;</code></li></ul></li><li>Asynchronously 異步發動：發動工作後，直接執行後續動作<ul><li><code>queue.async &#123; 定義你要做的工作 &#125;</code></li></ul></li></ol><h1 id="DispatchQueue-組合運用範例"><a href="#DispatchQueue-組合運用範例" class="headerlink" title="DispatchQueue 組合運用範例"></a>DispatchQueue 組合運用範例</h1><div class="note success flat"><p>關鍵判斷方式:<br>    - 決定 Closure 裡面可不可以執行看 Serial vs Concurrent<br>    - 決定後續是否直接執行看 Sync vs Async</p></div><img src="/pinkblog/2022/01/26/DispatchQueue-%E7%9A%84%E7%B0%A1%E5%96%AE%E6%87%89%E7%94%A8/4.png" class="" width="800"><div class="tabs" id="dispatchqueue"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#dispatchqueue-1">Serial+Sync</button></li><li class="tab"><button type="button" data-href="#dispatchqueue-2">Serial+Async</button></li><li class="tab"><button type="button" data-href="#dispatchqueue-3">Concurrent+Sync</button></li><li class="tab"><button type="button" data-href="#dispatchqueue-4">Concurrent+Async</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="dispatchqueue-1"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> serialQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;serialQueue&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">serialQueue.sync &#123;</span><br><span class="line">    (<span class="number">1</span> <span class="operator">...</span> <span class="number">5</span>).forEach&#123; <span class="built_in">print</span>(<span class="string">&quot;i: &quot;</span> <span class="operator">+</span> <span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line">serialQueue.sync &#123;</span><br><span class="line">    (<span class="number">1</span> <span class="operator">...</span> <span class="number">5</span>).forEach&#123; <span class="built_in">print</span>(<span class="string">&quot;j: &quot;</span> <span class="operator">+</span> <span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><p>由於執行 sync 所以 Closure1 內要先執行完成，才可以往下走<br>start &gt; Closure1 &gt; Closure2 &gt; end</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">i: 1</span><br><span class="line">i: 2</span><br><span class="line">i: 3</span><br><span class="line">i: 4</span><br><span class="line">i: 5</span><br><span class="line">j: 1</span><br><span class="line">j: 2</span><br><span class="line">j: 3</span><br><span class="line">j: 4</span><br><span class="line">j: 5</span><br><span class="line">end</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dispatchqueue-2"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> serialQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;serialQueue&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">serialQueue.async &#123;</span><br><span class="line">    (<span class="number">1</span> <span class="operator">...</span> <span class="number">5</span>).forEach&#123; <span class="built_in">print</span>(<span class="string">&quot;i: &quot;</span> <span class="operator">+</span> <span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line">serialQueue.async &#123;</span><br><span class="line">    (<span class="number">1</span> <span class="operator">...</span> <span class="number">5</span>).forEach&#123; <span class="built_in">print</span>(<span class="string">&quot;j: &quot;</span> <span class="operator">+</span> <span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><p>由於執行 async 所以可以連續執行到下一個 async 和最後一個 print end，<br>但因為是 serialQueue，所以導致先執行完第一個 Closure1 才能執行 Closure2</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">end</span><br><span class="line">i: 1</span><br><span class="line">i: 2</span><br><span class="line">i: 3</span><br><span class="line">i: 4</span><br><span class="line">i: 5</span><br><span class="line">j: 1</span><br><span class="line">j: 2</span><br><span class="line">j: 3</span><br><span class="line">j: 4</span><br><span class="line">j: 5</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dispatchqueue-3"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> concurrentQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;concurrentQueue&quot;</span>, attributes: .concurrent)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">concurrentQueue.sync &#123;</span><br><span class="line">    (<span class="number">1</span> <span class="operator">...</span> <span class="number">5</span>).forEach&#123; <span class="built_in">print</span>(<span class="string">&quot;i: &quot;</span> <span class="operator">+</span> <span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line">concurrentQueue.sync &#123;</span><br><span class="line">    (<span class="number">1</span> <span class="operator">...</span> <span class="number">5</span>).forEach&#123; <span class="built_in">print</span>(<span class="string">&quot;j: &quot;</span> <span class="operator">+</span> <span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><p>由於執行 sync 所以 Closure1 內要先執行完成，才可以往下走<br>所以就算是 concurrentQueue 也一樣</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">i: 1</span><br><span class="line">i: 2</span><br><span class="line">i: 3</span><br><span class="line">i: 4</span><br><span class="line">i: 5</span><br><span class="line">j: 1</span><br><span class="line">j: 2</span><br><span class="line">j: 3</span><br><span class="line">j: 4</span><br><span class="line">j: 5</span><br><span class="line">end</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dispatchqueue-4"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> concurrentQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;concurrentQueue&quot;</span>, attributes: .concurrent)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">concurrentQueue.async &#123;</span><br><span class="line">    (<span class="number">1</span> <span class="operator">...</span> <span class="number">5</span>).forEach&#123; <span class="built_in">print</span>(<span class="string">&quot;i: &quot;</span> <span class="operator">+</span> <span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line">concurrentQueue.async &#123;</span><br><span class="line">    (<span class="number">1</span> <span class="operator">...</span> <span class="number">5</span>).forEach&#123; <span class="built_in">print</span>(<span class="string">&quot;j: &quot;</span> <span class="operator">+</span> <span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><p>由於執行 async 所以可以連續執行到下一個 async 和最後一個 print end，<br>並且因為是 concurrentQueue 所以 Closure1 和 Closure2 是同時進行的。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">end</span><br><span class="line">j: 1</span><br><span class="line">i: 1</span><br><span class="line">j: 2</span><br><span class="line">i: 2</span><br><span class="line">j: 3</span><br><span class="line">i: 3</span><br><span class="line">j: 4</span><br><span class="line">i: 4</span><br><span class="line">j: 5</span><br><span class="line">i: 5</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="為什麼-async-的發動方式可以連續執行後續的程式碼呢？"><a href="#為什麼-async-的發動方式可以連續執行後續的程式碼呢？" class="headerlink" title="為什麼 async 的發動方式可以連續執行後續的程式碼呢？"></a>為什麼 async 的發動方式可以連續執行後續的程式碼呢？</h1><p>原因是因為 async 會特別建立新的 thread 來處理 async 裡的工作，<br>因此當前的執行緒可以繼續執行後續的程式碼。</p><img src="/pinkblog/2022/01/26/DispatchQueue-%E7%9A%84%E7%B0%A1%E5%96%AE%E6%87%89%E7%94%A8/5.png" class="" width="800"><hr><div class="note info flat"><p>知道上面那些組合，那他的應用情境到底是哪裡？</p></div><hr><h1 id="DispatchQueue-應用情境"><a href="#DispatchQueue-應用情境" class="headerlink" title="DispatchQueue 應用情境"></a>DispatchQueue 應用情境</h1><h2 id="情境一：處理大量資料"><a href="#情境一：處理大量資料" class="headerlink" title="情境一：處理大量資料"></a>情境一：處理大量資料</h2><p>通常不希望處理大量資料時會卡住使用者畫面，所以需要在背景執行工作。<br>可以使用 <code>DispatchQueue.global().async</code>，<br>但記得要回 main thread 才能更新畫面。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleBigData</span>()</span>&#123;</span><br><span class="line">    <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">        <span class="keyword">var</span> total <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">1000000</span>&#123;</span><br><span class="line">            total <span class="operator">+=</span> i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Done BigData <span class="subst">\(total)</span>&quot;</span>)</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Update UI on main thread.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="情境二：呼叫API"><a href="#情境二：呼叫API" class="headerlink" title="情境二：呼叫API"></a>情境二：呼叫API</h2><p>最常使用的 API 三方 Alamofire 幫我們處理好了，<br>呼叫 API 前三方內部會用 async 讓畫面不會卡，<br>同時預設回應是回 main queue (也可以自行設定 queue)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleCallApi</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://httpbin.org/get&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="type">AF</span>.request(url).response&#123;</span><br><span class="line">        response <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Done CallApi url <span class="subst">\(response)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="情境三：多道API並行呼叫，全部完成時要做統一處理"><a href="#情境三：多道API並行呼叫，全部完成時要做統一處理" class="headerlink" title="情境三：多道API並行呼叫，全部完成時要做統一處理"></a>情境三：多道API並行呼叫，全部完成時要做統一處理</h2><p>多道API呼叫後的結果，可能需要最後做一個統整的處理，最後才能更新畫面。</p><p>可以利用 group(enter+leave+notify)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMergeApi</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url1 <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://httpbin.org/get?data=1&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url2 <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://httpbin.org/get?data=2&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> group <span class="operator">=</span> <span class="type">DispatchGroup</span>()</span><br><span class="line">    group.enter()</span><br><span class="line">    <span class="type">AF</span>.request(url1).response&#123;</span><br><span class="line">        response <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Done MergeApi url1 <span class="subst">\(response)</span>&quot;</span>)</span><br><span class="line">        group.leave()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    group.enter()</span><br><span class="line">    <span class="type">AF</span>.request(url2).response&#123;</span><br><span class="line">        response <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Done MergeApi url2 <span class="subst">\(response)</span>&quot;</span>)</span><br><span class="line">        group.leave()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    group.notify(queue: .main) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Done MergeApi&quot;</span>)</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Merge Data or Update UI on main thread.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="情境四：一道一道呼叫API"><a href="#情境四：一道一道呼叫API" class="headerlink" title="情境四：一道一道呼叫API"></a>情境四：一道一道呼叫API</h2><p>由於 Alamofire 預設是 async 並行發送，<br>要做一點處理才能一道API完成後，再呼叫下一道API。</p><p>可以利用 group(enter+leave+wait)，但切記 wait 不可以在 main thread 上執行不然會卡死，<br>所以下面範例才使用 <code>DispatchQueue.global().async</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handlePipeApi</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url1 <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://httpbin.org/get?data=1&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url2 <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://httpbin.org/get?data=2&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> group <span class="operator">=</span> <span class="type">DispatchGroup</span>()</span><br><span class="line">    <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">        group.enter()</span><br><span class="line">        <span class="type">AF</span>.request(url1).response&#123;</span><br><span class="line">            response <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Done PipeApi url1 <span class="subst">\(response)</span>&quot;</span>)</span><br><span class="line">            group.leave()</span><br><span class="line">        &#125;</span><br><span class="line">        group.wait()</span><br><span class="line">        </span><br><span class="line">        group.enter()</span><br><span class="line">        <span class="type">AF</span>.request(url2).response&#123;</span><br><span class="line">            response <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Done PipeApi url2 <span class="subst">\(response)</span>&quot;</span>)</span><br><span class="line">            group.leave()</span><br><span class="line">        &#125;</span><br><span class="line">        group.wait()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Done PipeApi&quot;</span>)</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async&#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Update UI on main thread.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DispatchQueue-應用情境-Demo"><a href="#DispatchQueue-應用情境-Demo" class="headerlink" title="DispatchQueue 應用情境 Demo"></a>DispatchQueue 應用情境 Demo</h1><p><a href="https://github.com/pinkpika/DispatchQueueCase">Demo - DispatchQueueCase</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note default flat&quot;&gt;&lt;p&gt;本篇內容以非常初階的方式介紹 DispatchQueue，&lt;br&gt;同時會說明 iOS 體系裡最流行的多緒處理的技術 GCD 和一些應用情境和範例，&lt;br&gt;後來也有用在公司培訓初次接觸 iOS 工程師的一段課程裡。</summary>
      
    
    
    
    <category term="iOS Development" scheme="http://pinkpika.github.io/pinkblog/categories/iOS-Development/"/>
    
    
    <category term="iOS" scheme="http://pinkpika.github.io/pinkblog/tags/iOS/"/>
    
    <category term="Multithreading" scheme="http://pinkpika.github.io/pinkblog/tags/Multithreading/"/>
    
    <category term="多執行緒" scheme="http://pinkpika.github.io/pinkblog/tags/%E5%A4%9A%E5%9F%B7%E8%A1%8C%E7%B7%92/"/>
    
  </entry>
  
</feed>
